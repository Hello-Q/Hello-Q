<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django-setting常用设置</title>
      <link href="/2020/01/03/django/django-setting-chang-yong-she-zhi/"/>
      <url>/2020/01/03/django/django-setting-chang-yong-she-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="设置中国时区"><a href="#设置中国时区" class="headerlink" title="设置中国时区"></a>设置中国时区</h2><pre class="line-numbers language-python"><code class="language-python">TIME_ZONE <span class="token operator">=</span> <span class="token string">'UTC'</span>TIME_ZONE<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span> <span class="token comment" spellcheck="true"># 中国时区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><pre class="line-numbers language-python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Django-模型和admin站点</title>
      <link href="/2020/01/03/django/2.django-mo-xing-he-admin-zhan-dian/"/>
      <url>/2020/01/03/django/2.django-mo-xing-he-admin-zhan-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>配置settings中的 DATABASES 变量</p><ul><li>ENGINE 数据库引擎<ul><li>django.db.backends.sqlite3</li><li>django.db.backends.postgresql</li><li>django.db.backends.mysql</li><li>django.db.backends.oracle</li></ul></li><li>NAME 数据库的名称<br>  使用SQLite则指定文件的路径</li></ul><h3 id="mysql配置示例"><a href="#mysql配置示例" class="headerlink" title="mysql配置示例"></a>mysql配置示例</h3><pre class="line-numbers language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'crm'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'crm2019'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><p>setting文件</p><pre class="line-numbers language-python"><code class="language-python">TIME_ZONE <span class="token operator">=</span> <span class="token string">'UTC'</span>TIME_ZONE<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span> <span class="token comment" spellcheck="true"># 中国时区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置正确时区用于正确处理时间</p><h2 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h2><p>Django 自带了一些app（INSTALLED_APPS列表中），使用这些app需要先把app所需要的表创建。</p><ul><li><p>生成迁移文件</p><pre><code>python manage.py makemigrations &lt;app_name&gt;</code></pre><blockquote><p>忽略app_name 将为所用installed_apps列表中的app生成迁移文件</p></blockquote></li><li><p>执行迁移</p><pre class="line-numbers language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py migrate <span class="token operator">&lt;</span>app_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>忽略app_name 将为所用installed_apps列表中的app生成的迁移文件执行生效</p></blockquote></li><li><p>查看迁移sql语句</p><pre><code>python manage.py sqlmigrate &lt;app_name&gt; &lt;index&gt;</code></pre></li></ul><h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>Django的模型用类表示，继承<strong>django.db.models.Model</strong>类</p><p>示例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Question</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    question_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>    pub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'date published'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Choice</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    question <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    choice_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>    votes <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每个字段都是Field类的实例，映射到数据库中对应一个字段</li></ul><p>Django常用Field字段参考<br>字段|描述<br>-|-<br>AutoField|自增长字段<br>CharField|字符串类型<br>BoolField|布尔型<br>DateField|日期<br>DateTimeField|日期时间<br>EmailField|会检查是否合法Email地址<br>FileField|存文件的<br>ImageField|继承FileField，存图片的</p><h3 id="字段参数"><a href="#字段参数" class="headerlink" title="字段参数"></a>字段参数</h3><h4 id="所有字段都有的参数"><a href="#所有字段都有的参数" class="headerlink" title="所有字段都有的参数"></a>所有字段都有的参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>db_column=””</td><td>数据库中的表名</td></tr><tr><td>primmary_key=True</td><td>设置数据库主键</td></tr><tr><td>verbose_name=””</td><td>设置别名、备注</td></tr><tr><td>unique=True</td><td>设置唯一键</td></tr><tr><td>null=True</td><td>设置允许为空（数据库层级）</td></tr><tr><td>blank=True</td><td>设置允许为空（表达层面）</td></tr><tr><td>db_index</td><td>设置索引字段</td></tr><tr><td>help_text=””</td><td>在表单中显示帮助信息</td></tr><tr><td>editable=Ture</td><td>设置允许用户编辑此字段</td></tr></tbody></table><h3 id="个别字段有的参数"><a href="#个别字段有的参数" class="headerlink" title="个别字段有的参数"></a>个别字段有的参数</h3><ul><li>CharField<ul><li>max_length=100 设置允许的最大长度</li></ul></li><li>Date、DateTime<ul><li>unique_for_date=True  设置日期唯一</li><li>unique_for_month  设置月份唯一</li><li>auto_now=True  设置更新当前记录的时间</li><li>auto_now_add  设置新增当前记录的时间</li></ul></li><li>Deccimal<ul><li>max_digits=4  设置数据总位数为4位</li><li>decimal_places=2  设置小数位数为2位</li></ul></li><li>关系型字段的参数<ul><li>relates_name  父表查询子表时使用</li><li>db_constraint  bool值，是否启用物理外键</li><li>on_delete<blockquote><p>当一个被外键关联的对象被删除时，Django将模仿on_delete参数定义的SQL约束执行相应操作<br>如下6种操作</p></blockquote></li></ul></li></ul><pre><code>    - CASCADE：模拟SQL语言中的ON DELETE CASCADE约束，将定义有外键的模型对象同时删除！（该操作为当前Django版本的默认操作！）    - PROTECT:阻止上面的删除操作，但是弹出ProtectedError异常    - SET_NULL：将外键字段设为null，只有当字段设置了null=True时，方可使用该值。    - SET_DEFAULT:将外键字段设为默认值。只有当字段设置了default参数时，方可使用。    - DO_NOTHING：什么也不做。    - SET()：设置为一个传递给SET()的值或者一个回调函数的返回值。注意大小写</code></pre><h2 id="Django管理界面admin"><a href="#Django管理界面admin" class="headerlink" title="Django管理界面admin"></a>Django管理界面admin</h2><h3 id="创建管理员账号"><a href="#创建管理员账号" class="headerlink" title="创建管理员账号"></a>创建管理员账号</h3><p>执行</p><pre><code>python manage.py createsuperuser</code></pre><p>按照提示输入用户名、密码等信息</p><h3 id="向admin注册app"><a href="#向admin注册app" class="headerlink" title="向admin注册app"></a>向admin注册app</h3><p>在app的admin.py中写</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Questionadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Question<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. Django-请求与响应</title>
      <link href="/2020/01/03/django/1.django-chuang-jian-xiang-mu/"/>
      <url>/2020/01/03/django/1.django-chuang-jian-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="Django安装"><a href="#Django安装" class="headerlink" title="Django安装"></a>Django安装</h2><p>直接使用pip</p><pre><code>pip install django</code></pre><h2 id="创建一个Django-项目"><a href="#创建一个Django-项目" class="headerlink" title="创建一个Django 项目"></a>创建一个Django 项目</h2><p>使用django-admin模块</p><pre><code># django-admin startproject &lt;project_name&gt;django-admin startproject mysite</code></pre><h2 id="运行Django项目"><a href="#运行Django项目" class="headerlink" title="运行Django项目"></a>运行Django项目</h2><p>使用Django manage 工具</p><pre><code>python manage.py runserver</code></pre><p>默认端口8000</p><ul><li>也可以指定端口<pre><code>python manage.py runserver 8001</code></pre></li><li>指定IP<pre><code>python manage.py 0:8001</code></pre></li></ul><p>在浏览器打开对应ip+端口可以祝贺页面代表成功</p><blockquote><p>django 自带的web服务器支持热更新，但创建新文件等操作需要手动重启服务</p></blockquote><h2 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h2><p>使用django manage工具创建应用</p><pre><code>python manage.py start app polls</code></pre><h2 id="编写app视图"><a href="#编写app视图" class="headerlink" title="编写app视图"></a>编写app视图</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"Hello, world. You're at the polls index."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为视图编写路由"><a href="#为视图编写路由" class="headerlink" title="为视图编写路由"></a>为视图编写路由</h3><p>在app的目录下创建urls.py</p><p>编写对应代码<br>*app下的urls.py</p><pre><code>from django.urls import pathfrom . import viewsurlpatterns = [    path(&#39;&#39;, views.index, name=&#39;index&#39;),]</code></pre><p>在项目目录urls.py中插入include()将路由指向app中的路由文件url.py</p><p><em>项目目录下的urls.py</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> pathurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'polls/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'polls.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="path-参数"><a href="#path-参数" class="headerlink" title="path()参数"></a>path()参数</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>route</td><td>url路径，匹配用户访问的路径</td></tr><tr><td>view</td><td>url匹配后调用的视图</td></tr><tr><td>kwargs</td><td>任意个关键字参数可以作为一个字典传递给目标视图函数</td></tr><tr><td>name</td><td>为url命名，主要用在模板中</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.python-测试</title>
      <link href="/2019/12/29/python-xue-xi-bi-ji/11.python-ce-shi/"/>
      <url>/2019/12/29/python-xue-xi-bi-ji/11.python-ce-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>10.python-异常</title>
      <link href="/2019/12/28/python-xue-xi-bi-ji/10.python-yi-chang/"/>
      <url>/2019/12/28/python-xue-xi-bi-ji/10.python-yi-chang/</url>
      
        <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>错误分为错误和异常</li><li>错误可以认为避免</li><li>异常是只语法逻辑正确，出现的问题</li><li>python中，异常是一个类，可以处理使用</li></ul><h3 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h3><table><thead><tr><th>异常名称</th><th>描述</th></tr></thead><tbody><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF 标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsError</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块/对象失败</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError</td><td>Python 语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab 和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>TypeError</td><td>对类型无效的操作</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode 编码时错误</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode 转换时错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告异常名称</td></tr><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF 标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsError</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块/对象失败</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError</td><td>Python 语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab 和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>TypeError</td><td>对类型无效的操作</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode 编码时错误</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode 转换时错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告</td></tr></tbody></table><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>python使用try/except语句捕获处理异常</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 正常执行语块</span><span class="token keyword">except</span> expression<span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 发生对应异常时执行语块</span><span class="token keyword">except</span> <span class="token punctuation">(</span>expression1<span class="token punctuation">,</span> expression2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 发生异常若属于其中一种，执行语块</span><span class="token keyword">except</span> expression <span class="token keyword">as</span> identifier<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>identifier<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 可以重命名错误，并使用他</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 没有异常发生时执行语块</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 无论异常是否发生，都会执行的语块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最少要有try、except两个语块，else和finally是可选的。</li><li>多个except语块自上至下执行第一个错误匹配的且最多执行一个except语块。</li></ul><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>使用raise语句可以抛出一个指定的异常。</p><h3 id="raise语法"><a href="#raise语法" class="headerlink" title="raise语法"></a>raise语法</h3><p>raise [Exception [, args [, traceback]]]<br>Exception：错误类型<br>args：可选，以元组的形式传递给异常的参数<br>traceback：可选，异常触发时新生成的一个用于异常-正常化的跟踪记录，多用于重新引发异常时</p><h3 id="raise示例"><a href="#raise示例" class="headerlink" title="raise示例"></a>raise示例</h3><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'x 不能大于 5。x 的值为: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果x大于五就会引发异常</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>通过继承Exceotion类可以自定义一个异常</p><pre class="line-numbers language-python"><code class="language-python">NameError<span class="token keyword">class</span> <span class="token class-name">MyError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> repr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 引发这个异常</span><span class="token keyword">raise</span> MyError<span class="token punctuation">(</span><span class="token string">'自定义的异常'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre><code>Traceback (most recent call last):  File &quot;c:/Users/zhang/OneDrive/study/test/test.py&quot;, line 12, in &lt;module&gt;    raise MyError(&#39;自定义的异常&#39;, 33)TypeError: __init__() takes 2 positional arguments but 3 were given</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
            <tag> 高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.python-文件</title>
      <link href="/2019/12/28/python-xue-xi-bi-ji/9.python-wen-jian/"/>
      <url>/2019/12/28/python-xue-xi-bi-ji/9.python-wen-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">'./test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre><code>静夜思【作者】李白床前明月光，疑是地上霜。举头望明月，低头思故乡。</code></pre><ul><li>使用open打开文件并赋值给变量f</li><li>调用read()方法读取文件全部内容</li><li>调用close()方法 可以关闭文件（文件打开使用完毕后必须关闭）</li></ul><h2 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a>open()函数</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</p><p>参数说明:</p><p>file: 必需，文件路径（相对或者绝对路径）。<br>mode: 可选，文件打开模式<br>buffering: 设置缓冲<br>encoding: 一般使用utf8<br>errors: 报错级别<br>newline: 区分换行符<br>closefd: 传入的file参数类型</p><h3 id="open-mode模式可选值"><a href="#open-mode模式可选值" class="headerlink" title="open mode模式可选值"></a>open mode模式可选值</h3><table><thead><tr><th>模式</th><th>可读</th><th>可写</th><th>已存在文件写入方式</th><th>不存在写入处理方式</th><th>是否二进制</th></tr></thead><tbody><tr><td>r</td><td>✓</td><td>x</td><td>读取</td><td>o</td><td>x</td></tr><tr><td>rb</td><td>✓</td><td>x</td><td>读取</td><td>o</td><td>✓</td></tr><tr><td>r+</td><td>✓</td><td>✓</td><td>从指针处覆盖原内容</td><td>报错</td><td>x</td></tr><tr><td>rb+</td><td>✓</td><td>✓</td><td>从指针处覆盖原内容</td><td>报错</td><td>✓</td></tr><tr><td>w</td><td>x</td><td>✓</td><td>全删重写</td><td>创建写入</td><td>x</td></tr><tr><td>wb</td><td>x</td><td>✓</td><td>全删重写</td><td>创建写入</td><td>✓</td></tr><tr><td>w+</td><td>✓</td><td>✓</td><td>全删重写</td><td>创建写入</td><td>x</td></tr><tr><td>wb+</td><td>✓</td><td>✓</td><td>全删重写</td><td>创建写入</td><td>✓</td></tr><tr><td>a</td><td>x</td><td>✓</td><td>追加</td><td>创建写入</td><td>x</td></tr><tr><td>ab</td><td>x</td><td>✓</td><td>追加</td><td>创建写入</td><td>✓</td></tr><tr><td>a+</td><td>✓</td><td>✓</td><td>追加</td><td>创建写入</td><td>x</td></tr><tr><td>ab+</td><td>✓</td><td>✓</td><td>追加</td><td>创建写入</td><td>✓</td></tr></tbody></table><ul><li>r开头主要是不能创建新文件</li><li>w开头主要是不能追加新内容</li><li>a开头则可以追加 内容</li><li>二进制可以写一些图片等文件</li></ul><p><strong>简单总结模式</strong><br>模式|r|r+|w|w+|a|a+<br>-|-|-|-|-|-|-<br>读|✓|✓|x|✓|x|✓<br>写|x|✓|✓|✓|✓|✓<br>创建|x|x|✓|✓|✓|✓<br>覆盖|x|x|✓|✓|x|x<br>指针在开始|✓|✓|✓|✓|x|x<br>指针在结尾|x|x|x|x|✓|✓</p><h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><p><strong>with语句主要是可以自动判断文件作用域，在不需要时自动关闭文件，访问文件忘记关闭或过早关闭</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">'./test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="file对象属性方法"><a href="#file对象属性方法" class="headerlink" title="file对象属性方法"></a>file对象属性方法</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>file.close</td><td>检查文件是否关闭，返回bool值</td></tr><tr><td>file.mode</td><td>返回文件打开的模式</td></tr><tr><td>file.name</td><td>返回打开文件的名字</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>file.close()</td><td>关闭文件</td></tr><tr><td>file.read(size)</td><td>读取文件内容，size设置读取字节数，为给定返回全部内容</td></tr><tr><td>file.readline(size)</td><td>按行读取，包括/n，size设置读取字节数，会读取到这个字节数所在行的结束位置。</td></tr><tr><td>file.readlines(size)</td><td>按行读取，包括/n，并讲每行当做一个元素组成一个列表，会读取到这个字节数所在行的结束位置。</td></tr><tr><td>flie.write(str)</td><td>写入内容，返回写入内容长度</td></tr><tr><td>file.writelines(sequence)</td><td>向文件写入一个序列字符串列表，如列表、元祖</td></tr><tr><td>file.seek(offset[, whence])</td><td>调整指针位置，offset偏移量，whence可选，默认0：文件头，1：当前位置，2：文件尾</td></tr><tr><td>file.tell()</td><td>返回当前指针位置</td></tr></tbody></table><h2 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">'./test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> content <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> content <span class="token keyword">in</span> list<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;转&gt;Gitee(码云)、Github同时配置ssh key</title>
      <link href="/2019/12/26/ruan-jian-an-zhuang-yu-pei-zhi/gitee-ma-yun-github-tong-shi-pei-zhi-ssh-key/"/>
      <url>/2019/12/26/ruan-jian-an-zhuang-yu-pei-zhi/gitee-ma-yun-github-tong-shi-pei-zhi-ssh-key/</url>
      
        <content type="html"><![CDATA[<p>一、cd ~/.ssh<br>二、通过下面的命令，依次生成两个平台的key</p><pre><code>$ ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot; -f &quot;github_id_rsa&quot;$ ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot; -f &quot;gitee_id_rsa&quot;</code></pre><p>完成后，.ssh文件夹生成以下文件</p><p>gitee_id_rsa<br>gitee_id_rsa.pub<br>github_id_rsa<br>github_id_rsa.pub</p><p>三、把public key复制到gitee和github<br>把github_id_rsa.pub中内容复制到github的ssh中保存</p><p>同样的操作，添加gitee的ssh</p><p>四、创建config文件解决ssh冲突<br>在.ssh文件夹下执行命令vi config<br>文件中添加以下内容</p><pre><code># giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa</code></pre><p>五、测试<br>执行</p><pre class="line-numbers language-cmd"><code class="language-cmd">ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功则返回</p><pre class="line-numbers language-cmd"><code class="language-cmd">Welcome to Gitee.com ,yourname!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行</p><pre class="line-numbers language-cmd"><code class="language-cmd">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功则返回</p><pre class="line-numbers language-cmd"><code class="language-cmd">Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>————————————————<br>版权声明：本文为CSDN博主「Allen Leung」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/londa/article/details/92065424" target="_blank" rel="noopener">https://blog.csdn.net/londa/article/details/92065424</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个java程序-输出hello world</title>
      <link href="/2019/12/25/java-xue-xi-bi-ji/di-yi-ge-java-cheng-xu-shu-chu-hello-world/"/>
      <url>/2019/12/25/java-xue-xi-bi-ji/di-yi-ge-java-cheng-xu-shu-chu-hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA-程序编写流程"><a href="#JAVA-程序编写流程" class="headerlink" title="JAVA 程序编写流程"></a>JAVA 程序编写流程</h2><ol><li>新建拓展名为.java的文件</li><li>编写相关代码</li><li>在文件的路径下启动命令行</li><li>使用javac对编写的文件进行编译，生成.class文件</li><li>使用java对生成的文件进行解释执行</li></ol><h2 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h2><h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p><em>文件名为Hello.java</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// public class 是java的关键字，并且使用此关键字修饰的类名要与文件名相同</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//main()方法是java程序执行的入口点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//向控制台输出信息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//java中{}要一一对应</span><span class="token comment" spellcheck="true">//java大小写敏感，语句用半角分号结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行程序"><a href="#执行程序" class="headerlink" title="执行程序"></a>执行程序</h3><ol><li>在命令中执行javac hello 编译代码</li><li>接着执行java hello 运行代码</li></ol><p>控制台会输出</p><pre><code>Hello World</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip国内源设置方法</title>
      <link href="/2019/12/25/ruan-jian-an-zhuang-yu-pei-zhi/pip-guo-nei-yuan-she-zhi-fang-fa/"/>
      <url>/2019/12/25/ruan-jian-an-zhuang-yu-pei-zhi/pip-guo-nei-yuan-she-zhi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="pip国内的一些镜像"><a href="#pip国内的一些镜像" class="headerlink" title="pip国内的一些镜像"></a>pip国内的一些镜像</h2><p> 阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a><br> 中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br> 豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a><br> 清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br> 中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><h2 id="临时修改："><a href="#临时修改：" class="headerlink" title="临时修改："></a>临时修改：</h2><p>可以在使用pip的时候在后面加上-i参数，指定pip源 </p><pre><code>pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><h2 id="永久修改："><a href="#永久修改：" class="headerlink" title="永久修改："></a>永久修改：</h2><h3 id="linux"><a href="#linux" class="headerlink" title="linux:"></a>linux:</h3><p>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</p><pre><code>[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><h3 id="windows"><a href="#windows" class="headerlink" title="windows:"></a>windows:</h3><p>直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下</p><pre><code>[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java安装（Ubuntu）</title>
      <link href="/2019/12/25/java-xue-xi-bi-ji/java-an-zhuang-pei-zhi-ubuntu/"/>
      <url>/2019/12/25/java-xue-xi-bi-ji/java-an-zhuang-pei-zhi-ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="java安装"><a href="#java安装" class="headerlink" title="java安装"></a>java安装</h2><ul><li>上<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官网</a>下载对应安装包</li><li>解压安装包，移动到/opt目录下</li><li>添加环境</li></ul><p>在~/.bashrc中添加以下代码</p><pre><code>export JAVA_HOME=/opt/jdk1.8.0_231  ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME=${JAVA_HOME}/jre  export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  export PATH=${JAVA_HOME}/bin:$PATH </code></pre><p><strong>java路径中不要出现中文</strong></p><h2 id="java-JDK目录简介"><a href="#java-JDK目录简介" class="headerlink" title="java JDK目录简介"></a>java JDK目录简介</h2><p><img src="https://gitee.com/zhendimang/picture_bed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019-12-25_22-55-28_%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="JAVA  JDK目录"></p><table><thead><tr><th>目录</th><th>用途</th></tr></thead><tbody><tr><td>bin</td><td>存放java的编译器、解释器（对应系统的可执行文件）</td></tr><tr><td>include</td><td>存放调用系统资源的借口文件</td></tr><tr><td>jre</td><td>java运行环境文件</td></tr><tr><td>lib</td><td>Java类库文件</td></tr><tr><td>src.zip</td><td>JDK提供类的源代码</td></tr></tbody></table><h2 id="常用的概念"><a href="#常用的概念" class="headerlink" title="常用的概念"></a>常用的概念</h2><table><thead><tr><th>名称</th><th>概念</th></tr></thead><tbody><tr><td>jdk</td><td>java开发工具包</td></tr><tr><td>jre</td><td>java运行环境信息</td></tr><tr><td>jvm</td><td>java虚拟机</td></tr><tr><td>javac</td><td>java语言编译器</td></tr><tr><td>java</td><td>java语言解释器</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> java </tag>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu自带截图（GNOME 截图）快捷键</title>
      <link href="/2019/12/23/linux/ubuntu-zi-dai-jie-tu-kuai-jie-jian/"/>
      <url>/2019/12/23/linux/ubuntu-zi-dai-jie-tu-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>PrtSc</td><td>获取整个屏幕的截图并保存到 Pictures 目录。</td></tr><tr><td>Shift + PrtSc</td><td>获取屏幕的某个区域截图并保存到 Pictures 目录。</td></tr><tr><td>Alt + PrtSc</td><td>获取当前窗口的截图并保存到 Pictures 目录。</td></tr><tr><td>Ctrl + PrtSc</td><td>获取整个屏幕的截图并存放到剪贴板。</td></tr><tr><td>Shift + Ctrl + PrtSc</td><td>获取屏幕的某个区域截图并存放到剪贴板。</td></tr><tr><td>Ctrl + Alt + PrtSc</td><td>获取当前窗口的 截图并存放到剪贴板。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 软件使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu桌面文件属性解释</title>
      <link href="/2019/12/22/linux/ubuntu-zhuo-mian-wen-jian-shu-xing-jie-shi/"/>
      <url>/2019/12/22/linux/ubuntu-zhuo-mian-wen-jian-shu-xing-jie-shi/</url>
      
        <content type="html"><![CDATA[<p>文件位置</p><p>/usr/share/applications</p><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>[Desktop Entry]</td><td>文件头</td></tr><tr><td>Encoding=UTF-8</td><td>编码方式</td></tr><tr><td>Name=story-write</td><td>应用程序名称，根据当前系统语言匹配显示，优先匹配更细化的语言标识名称</td></tr><tr><td>Comment=comment</td><td>鼠标经过上面时的提示名称，也可国际化</td></tr><tr><td>Exec=command</td><td>菜单执行的命令或程序</td></tr><tr><td>Icon=iconpath</td><td>显示在菜单项中的图标，可以为空</td></tr><tr><td>Terminal=false</td><td>是否使用终端</td></tr><tr><td>Type=Application</td><td>分类</td></tr><tr><td>Hidden=false</td><td>菜单是否隐藏，类似NoDisplay属性</td></tr><tr><td>Categories=Application;Network;</td><td>菜单所属类别，可以确定该菜单的位置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium基础使用</title>
      <link href="/2019/12/21/python/selenium-ji-chu-shi-yong/"/>
      <url>/2019/12/21/python/selenium-ji-chu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作-软件安装"><a href="#准备工作-软件安装" class="headerlink" title="准备工作-软件安装"></a>准备工作-软件安装</h2><h3 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h3><p>直接使用pip就可以安装</p><pre class="line-numbers language-shell"><code class="language-shell">pip install selenium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装-chromedriver"><a href="#安装-chromedriver" class="headerlink" title="安装 chromedriver"></a>安装 chromedriver</h3><p>国内可以到<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">Chromedriver仓库</a>下载</p><p>具体版本根据自己本机安装的chrome浏览器安装，版本对照如下：</p><table><thead><tr><th>ChromeDriver Version</th><th>Chrome Version</th></tr></thead><tbody><tr><td>78.0.3904.11</td><td>78</td></tr><tr><td>77.0.3865.40</td><td>77</td></tr><tr><td>77.0.3865.10</td><td>77</td></tr><tr><td>76.0.3809.126</td><td>76</td></tr><tr><td>76.0.3809.68</td><td>76</td></tr><tr><td>76.0.3809.25</td><td>76</td></tr><tr><td>76.0.3809.12</td><td>76</td></tr><tr><td>75.0.3770.90</td><td>75</td></tr><tr><td>75.0.3770.8</td><td>75</td></tr><tr><td>74.0.3729.6</td><td>74</td></tr><tr><td>73.0.3683.68</td><td>73</td></tr><tr><td>72.0.3626.69</td><td>72</td></tr><tr><td>2.46</td><td>71-73</td></tr><tr><td>2.46</td><td>71-73</td></tr><tr><td>2.45</td><td>70-72</td></tr><tr><td>2.44</td><td>69-71</td></tr><tr><td>2.43</td><td>69-71</td></tr><tr><td>2.42</td><td>68-70</td></tr><tr><td>2.41</td><td>67-69</td></tr><tr><td>2.40</td><td>66-68</td></tr><tr><td>2.39</td><td>66-68</td></tr><tr><td>2.38</td><td>65-67</td></tr><tr><td>2.37</td><td>64-66</td></tr><tr><td>2.36</td><td>63-65</td></tr><tr><td>2.35</td><td>62-64</td></tr></tbody></table><p>查看chrome版本：在浏览器中输入 chrome://settings/help 查看</p><p>讲下载的驱动文件放在运行的程序目录下或者系统环境中，系统环境查看方法</p><pre class="line-numbers language-cmd"><code class="language-cmd">echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="一个简单的程序"><a href="#一个简单的程序" class="headerlink" title="一个简单的程序"></a>一个简单的程序</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 使用谷歌驱动</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/"</span><span class="token comment" spellcheck="true"># 发起请求</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在搜索框中输入“python”</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击“百度一下”</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@type='submit']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>%<a href="./videos/sim-2019-12-22_19_2.57.32.mp4">enter description here</a><br><img src="https://i.loli.net/2019/12/22/CiUgLwSrp5OkfI9.gif" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 自动化 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu常用软件安装及配置</title>
      <link href="/2019/12/16/ruan-jian-an-zhuang-yu-pei-zhi/ubuntu-chang-yong-ruan-jian-an-zhuang/"/>
      <url>/2019/12/16/ruan-jian-an-zhuang-yu-pei-zhi/ubuntu-chang-yong-ruan-jian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu常用软件安装"><a href="#Ubuntu常用软件安装" class="headerlink" title="Ubuntu常用软件安装"></a>Ubuntu常用软件安装</h1><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>上<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官网</a>下载安装包，直接点击安装即可。</p><h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><ul><li><p>按ctrl+shift+x打开商店，搜索Chinese (Simplified) Language Pack for Visual Studio Code 选择中文安装包安装。</p></li><li><p>按ctrl+shift+p打开命令面板，之后输入 “config” 筛选可用命令列表，选择&gt;display language，后选择zh-cn并重启scode。</p></li></ul><h3 id="解决终端乱码、字体太宽"><a href="#解决终端乱码、字体太宽" class="headerlink" title="解决终端乱码、字体太宽"></a>解决终端乱码、字体太宽</h3><p><img src="https://gitee.com/zhendimang/picture_bed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1577085535468.png" alt="修改前"></p><p>点击<strong>文件</strong>→<strong>首选项</strong>→<strong>设置</strong>，搜索<em>terminal.integrated.fontFamily<em>，修改输入</em>monospace</em></p><p><img src="https://gitee.com/zhendimang/picture_bed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2019-12-23_15-35-43_%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="修改后"></p><h2 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>上<a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">官网</a>下载deb包直接安装（Ubuntu14 LTS以上）</p><h2 id="Google浏览器"><a href="#Google浏览器" class="headerlink" title="Google浏览器"></a>Google浏览器</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>上<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">官网</a>下载deb包直接安装</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><ul><li>上<a href="http://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="noopener">官网</a>下载解压。</li><li>进入/pycharm-2019.3/bin运行 <em>./pycharm.sh</em> 按照指引配置</li></ul><h3 id="破解（ver-2019-3）"><a href="#破解（ver-2019-3）" class="headerlink" title="破解（ver=2019.3）"></a>破解（ver=2019.3）</h3><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>将汉化包放入lib文件夹内重启IDE</p><h3 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h3><p>选择<strong>文件-导入配置、到处配置</strong>进行操作</p><h3 id="桌面图标"><a href="#桌面图标" class="headerlink" title="桌面图标"></a>桌面图标</h3><p>在/usr/share/applications/下创建pycarm.desktop，写入</p><pre class="line-numbers language-shell"><code class="language-shell">[Desktop Entry]Version=1.0Type=ApplicationName=PyCharmIcon=/home/zhang/app/pycharm-2019.1.1/bin/pycharm.svg   #  图标路径Exec="/home/zhang/app/pycharm-2019.1.1/bin/pycharm.sh" %f  #  执行文件路径Comment=Python IDE for Professional DevelopersCategories=Development;IDE;Terminal=falseStartupWMClass=jetbrains-pycharm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python3-7"><a href="#python3-7" class="headerlink" title="python3.7"></a>python3.7</h2><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><ul><li>安装相关工具</li></ul><pre class="line-numbers language-shell"><code class="language-shell">apt-get install gcc make python-dev  libffi-dev libssl-dev  libxml2-dev libxslt-dev  libmysqlclient-dev libsqlite3-dev zlib1g-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺少其他工具包，安装即可。</p><ul><li><p>下载安装包解压</p><pre class="line-numbers language-shell"><code class="language-shell">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xztar -xvJf  Python-3.7.0.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编译安装</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">mkdir /usr/local/python3.7  # 创建编译安装目录cd Python-3.7.0./configure --with-ssl   --prefix=/usr/local/python3.7#注意加上ssl，不然会导致pip无法使用make && make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建软连接</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo ln -s /usr/local/python3.7/bin/python3.7 /usr/local/bin/python3.7sudo ln -s /usr/local/python3.7/bin/pip3.7 /usr/local/bin/pip3.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>验证安装结果</li></ul><pre class="line-numbers language-shell"><code class="language-shell">zhang@zhang-pc:~$ python3.7 -VPython 3.7.0zhang@zhang-pc:~$ pip3.7 -Vpip 10.0.1 from /usr/local/python3.7/lib/python3.7/site-packages/pip (python 3.7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Virtualenvwrapper"><a href="#Virtualenvwrapper" class="headerlink" title="Virtualenvwrapper"></a>Virtualenvwrapper</h2><h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo pip3 install virtualenvwrapper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能的报错</p><pre class="line-numbers language-shell"><code class="language-shell">ERROR: virtualenvwrapper could not find virtualenv in your path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法<br>首先还是用 find / -name “virtualenv” 去找到位置，并建立软连接</p><pre class="line-numbers language-shell"><code class="language-shell">zhang@zhang-pc:/usr/local/python3.7/bin$ sudo  find / -name "virtualenv" [sudo] zhang 的密码： /usr/local/python3.7/bin/virtualenvfind: ‘/run/user/1000/gvfs’: 权限不够find: ‘/run/user/121/gvfs’: 权限不够zhang@zhang-pc:/usr/local/python3.7/bin$ sudo ln -s /usr/local/python3.7/bin/virtualenv /usr/local/bin/virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>编辑 ~/ .bashrc 文件</p><pre class="line-numbers language-shell"><code class="language-shell">export VIRTUALENVWRAPPER_PYTHON=/usr/local/python3.7/bin/python3.7  # 使用的pythonexport WORKON_HOME=~/.virtualenv # 存放虚拟环境的目录source /usr/local/python3.7/bin/virtualenvwrapper.sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>建立存放虚拟环境的目录</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir ~/.virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化</p><pre class="line-numbers language-shell"><code class="language-shell">source  ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><pre class="line-numbers language-shell"><code class="language-shell">mkvirtualenv python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="选择虚拟环境"><a href="#选择虚拟环境" class="headerlink" title="选择虚拟环境"></a>选择虚拟环境</h3><pre class="line-numbers language-shell"><code class="language-shell">workon python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列出虚拟环境"><a href="#列出虚拟环境" class="headerlink" title="列出虚拟环境"></a>列出虚拟环境</h3><pre class="line-numbers language-shell"><code class="language-shell">workon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者是</p><pre class="line-numbers language-shell"><code class="language-shell">lsvirtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="停止环境"><a href="#停止环境" class="headerlink" title="停止环境"></a>停止环境</h3><pre class="line-numbers language-shell"><code class="language-shell">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h3><pre class="line-numbers language-shell"><code class="language-shell">rmvirtualenv python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置github和码云ssh-key"><a href="#设置github和码云ssh-key" class="headerlink" title="设置github和码云ssh key"></a>设置github和码云ssh key</h2><ul><li><p>创建相关文件夹</p><pre><code>mkdir ~/.sshcd ~/.ssh</code></pre></li><li><p>通过下面的命令，依次生成两个平台的key</p><pre><code>$ ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot; -f &quot;github_id_rsa&quot;$ ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot; -f &quot;gitee_id_rsa&quot;</code></pre></li><li><p>把key复制到gitee和github</p><pre><code>cat github_id_rsa.pub </code></pre></li><li><p>创建config文件解决ssh冲突<br>在.ssh文件夹下执行命令vi config<br>文件中添加以下内容</p><pre><code># giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa</code></pre></li></ul><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa</p><pre><code>- 测试  执行</code></pre><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>成功则返回<br>Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>执行<br>ssh -T <a href="mailto:git@gitee.com" target="_blank" rel="noopener">git@gitee.com</a><br>成功则返回<br>Hi xxx! You’ve successfully authenticated, but GITEE.COM does not provide shell access.<br>```</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>&lt;转&gt; centos安装python3.7</title>
      <link href="/2019/12/11/ruan-jian-an-zhuang-yu-pei-zhi/centos-an-zhuang-python3-7/"/>
      <url>/2019/12/11/ruan-jian-an-zhuang-yu-pei-zhi/centos-an-zhuang-python3-7/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos7安装Python3-7"><a href="#Centos7安装Python3-7" class="headerlink" title="Centos7安装Python3.7"></a>Centos7安装Python3.7</h2><p><a href="https://www.cnblogs.com/anxminise/p/9650206.html" target="_blank" rel="noopener">原文</a></p><p><em>全部操作都在root用户下执行</em></p><h3 id="安装编译相关工具"><a href="#安装编译相关工具" class="headerlink" title="安装编译相关工具"></a>安装编译相关工具</h3><pre class="line-numbers language-shell"><code class="language-shell">yum -y groupinstall "Development tools"yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum install libffi-devel -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="下载安装包解压"><a href="#下载安装包解压" class="headerlink" title="下载安装包解压"></a>下载安装包解压</h3><pre><code>cd #回到用户目录wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xztar -xvJf  Python-3.7.0.tar.xz</code></pre><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre><code>mkdir /usr/local/python3 #创建编译安装目录cd Python-3.7.0./configure --prefix=/usr/local/python3make &amp;&amp; make install</code></pre><h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><pre><code>ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</code></pre><h3 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><pre><code>python3 -Vpip3 -V</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 软件安装 </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.python-类</title>
      <link href="/2019/11/09/python-xue-xi-bi-ji/8.python-lei/"/>
      <url>/2019/11/09/python-xue-xi-bi-ji/8.python-lei/</url>
      
        <content type="html"><![CDATA[<p><strong>面向对象编程</strong>是最有效的软件编写方法之一，在面向对象编程过程中，编写表示现实世界中的实物个情景的<strong>类</strong>，并基于这些<strong>类</strong>创建对象。</p><h2 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h2><h3 id="创建一个Dog类"><a href="#创建一个Dog类" class="headerlink" title="创建一个Dog类"></a>创建一个Dog类</h3><p>创建一个Dog类，每个实例储存名字和年龄，并且赋予每条小狗蹲下和打滚的能力。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 1</span>    <span class="token triple-quoted-string string">"""描述小狗的类"""</span>  <span class="token comment" spellcheck="true"># 2</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 3</span>        <span class="token triple-quoted-string string">"""初始化属性name和age"""</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token comment" spellcheck="true"># 4</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 5</span>        <span class="token triple-quoted-string string">"""模拟小狗被命令蹲下"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is now sitting."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">roll_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""模拟小狗打滚"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" rolled_over!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的实现"><a href="#类的实现" class="headerlink" title="类的实现"></a>类的实现</h3><h4 id="申明一个类"><a href="#申明一个类" class="headerlink" title="申明一个类"></a>申明一个类</h4><ul><li>使用class关键字  #1处。</li><li>#2处为这个类的说明文档，使用三引号括起来。</li><li>#3处是类的方法，是一个特殊方法，在类被实例化时会自动调用<strong>init</strong>方法。</li><li>#4处的变量以self开头，self代表对象本身，以self开头的变量，可供类内所有的方法使用。</li><li>#5是给类定义的另一个方法。</li><li>类由属性和方法（类中的函数称为方法）构成，其他不能出现<blockquote><p>在python2.7中创建类时，需要继承object。</p></blockquote><h4 id="类的命名"><a href="#类的命名" class="headerlink" title="类的命名"></a>类的命名</h4></li><li>遵循大驼峰命名</li><li>避开与系统命名类似</li></ul><h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 变量 = 类名() #实例化了一个对象</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"willie"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就创建了一个名为“willie”的6岁的小狗。</p><h4 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h4><p>使用句点表示法可以访问实例的属性</p><pre class="line-numbers language-python"><code class="language-python">dog<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre><code>willie</code></pre><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p>使用据点表示法可以调用类中定义的任何放方法</p><pre class="line-numbers language-python"><code class="language-python">dog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>roll_over<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出</p><pre><code>Willie is now sitting.Willie rolled_over!</code></pre><h4 id="创建多个实例"><a href="#创建多个实例" class="headerlink" title="创建多个实例"></a>创建多个实例</h4><pre class="line-numbers language-pyhton"><code class="language-pyhton">my_dog = Dog("willie", 4)your_dog = ("lick", 3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以根据类创建多个实例。</p><h2 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h2><h3 id="指定属性默认值"><a href="#指定属性默认值" class="headerlink" title="指定属性默认值"></a>指定属性默认值</h3><p>类中的每个属性都必须有初始值，在方法<strong>init</strong>()内可以指定初始值，这样就无需在初始化类时提供形参。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 指定小狗的age默认值为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h3><p>可以通过三种方法修改属性的值：</p><ol><li><p>直接修改属性值</p><pre class="line-numbers language-python"><code class="language-python"> dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"willie"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wollie 今年"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"岁"</span><span class="token punctuation">)</span> dog<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wollie长了1岁，今年"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 输出</p><pre><code> wollie 今年0岁 wollie长了1岁，今年1了</code></pre></li><li><p>通过方法设置属性值</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>name <span class="token operator">=</span> name     self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">def</span> <span class="token function">update_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> self<span class="token punctuation">.</span>age <span class="token operator">>=</span> age<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你狗狗的年龄不能倒着长"</span><span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"willie"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wollie 今年"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"岁"</span><span class="token punctuation">)</span> dog<span class="token punctuation">.</span>update_age<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wollie长了1岁，今年"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"了"</span><span class="token punctuation">)</span> dog<span class="token punctuation">.</span>update_age<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 输出</p><pre><code> wollie 今年1岁 wollie长了1岁，今年2了 你狗狗的年龄不能倒着长</code></pre><p> 调用方法对狗狗的年龄进行修改，并且修改前对狗狗的年龄判断是否增加年龄，增加执行更行年龄，否则提醒不能减小狗狗的年龄。</p></li><li><p>通过方法递增递减属性值</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>name <span class="token operator">=</span> name     self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">def</span> <span class="token function">add_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>age <span class="token operator">+=</span> age dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"willwe"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> dog<span class="token punctuation">.</span>add_age<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 输出</p><pre><code> 1 2</code></pre><p> 这样每次调用add_age()方法并指定狗狗成长的年龄就可以实现对狗狗年龄属行的修改。</p></li></ol><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>一个类从一另一个类继承时，可以获得他的成员属性和成员方法。被继承的类称为父类（基类、超类），新类称为子类（派生类）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">say_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">OldPerson</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> petname<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> petname<span class="token punctuation">)</span>old_person <span class="token operator">=</span> OldPerson<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>old_person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>old_person<span class="token punctuation">.</span>say_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在子类名字的括号中写父类的名字既可以继承父类的非私有的所有属性和方法。并且子类可以调用父类的方法，访问父类的属性。</li><li>在继承父类时，若父类<strong>init</strong>()需要参数，子类的<strong>init</strong>()需要协助父类赋值</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM-教育版产品文档</title>
      <link href="/2019/11/04/chan-pin-she-ji/crm-jiao-yu-ban-chan-pin-wen-dang/"/>
      <url>/2019/11/04/chan-pin-she-ji/crm-jiao-yu-ban-chan-pin-wen-dang/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/11/04/pjTozrAqiL1O4hn.png" alt="CRM教育版系统.png"></p><p>CRM系统</p><p>XXXX:需要到基础参数中设置参数</p><h1 id="招生"><a href="#招生" class="headerlink" title="招生"></a>招生</h1><h2 id="线索获取"><a href="#线索获取" class="headerlink" title="线索获取"></a>线索获取</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>线索的获取分两个大类：</p><p>手动录入：</p><p>线索获取为客服拿到第一手资源信息时进行学员基本信息的录入。</p><p>手动输入的客户可放入公海池， 也可以直接分入私池。<a href="#_线索分配机制">遵循线索分配机制。</a></p><p>自动生成：</p><p>将官网、公众号等渠道收集到的注册信息对接到CRM系统中。</p><p>自动获取的线索将进入公海客户池。</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>渠道类型：自动获取将根据来源接口信息自动生成，手动输入为选择渠道管理中预先设置好的渠道类型。两种情况全部必填；</p><p>线索获取部门：自动获抓取渠道管理中的负责部门，手动输入则手动选择。需要注意的是，会有多个部门协作一条线索的情况，此处要以逗号分隔符储存部门。</p><p>获取时间：自动获取即当前时间，手动输入为输入时间 。两种情况全部必填；</p><p>来源url：自动获取即来源url，手动输入为空或者是对应渠道的正则url；</p><p>关键词：来自搜索引擎的搜索词。计划-单元-关键词-搜索词</p><p>姓名：输入的姓名。两种情况全部必填；</p><p>电话：输入的电话，并对电话号进行查重校验，用户输入的线索不校验重复，防止我们通过其他渠道收录过用户电话，以免引起不必要纠纷。两种情况全部必填；</p><p>年龄：输入的年龄数据，且只能时整数类型，非法字符友善提醒，或者是将用户输入的信息进行重新格式化。两种情况都可不填；</p><p>性别：选择性别，可以为空，两种情况都可不填；</p><p>住址：文本输入或选择或坐标打标，两种情况都可不填；</p><p>咨询课程：选择课程管理中预设的课程，两种情况都可不填；</p><p>意向校区：选择校区管理中的预设校区，在用户选择时，要提供校区的地址，电话等信息，以辅助用户选择，两种情况都可不填。</p><p>意向课程：选择课程管理中的预设课程，自动获取与手动录入相同。</p><p>跟进客服：用户录入时，此项为空，线索进入公海客户池。客服人员手动录入时，只能选择自己进行跟进，不遵循<a href="#_线索分配机制_1">线索分配机制</a>，此种属于特殊情况，允许溢出指标。两种情况都可不填。</p><p>录入人：自动获取时，常规渠道为系统默认，临时渠道的，不区分人时俄日系统默认，区分时，抓取url中的id 信息匹配对应员工。详见渠道管理中的<a href="#_临时渠道">临时渠道</a></p><p>备注：用于客服人员对线索的备注，手动录入时选填，用户输入一般没有此栏目。</p><p>Ps：输入字段如上所列，手动录入时全部显示，全部可编辑，自动提交表单跟进业务实际情况在以上且只能在以上字段中进行选择。</p><p>对于线索的获取进入CRM系统的过程，应优先考虑自动化接入方法。如官网的自动提交，微信公众号的自动提交，地推的二维码自动提交。无法自动获取的线索，进行手工录入，录入过程讲究尽量的方便与快捷。</p><p>特殊情况：手工录入除去客服人员会录入外，校区咨询师也会收到线索信息，关于客服人员以及咨询人员录入后的分配，在下文中的<a href="#_线索分配机制_1">线索分配机制</a>中做详细阐述。</p><h3 id="公海池线索列表中提供操作"><a href="#公海池线索列表中提供操作" class="headerlink" title="公海池线索列表中提供操作"></a>公海池线索列表中提供操作</h3><ol><li>批量导入：公海管理员可使用</li></ol><p>系统要提供批量导入线索功能用于大量线索进入系统中，例如异业给到的电话号码，线下活动获取的线索列表等。首先点击批量导入后，展示导入页面，页面提供上传导入文件以及下载导入模板功能。用户首次使用应下载导入模板，进行上述字段的填写，然后再上传文件。上传后进行以下校验：首先渠道类型，获取时间，姓名，电话必填，且渠道类型比如是系统中已经有的类型。然后对电话号码进行查重验证，对于重复的线索要返回给用户，要求用户二次确认重复的电话线索是否确认导入。</p><ol start="2"><li>批量分配客服：公海管理员可使用</li></ol><p>对线索进行多选后，批量分配客服，此种方式输入手工分配，遵循<a href="#_线索分配机制_1">线索分配机制</a>。</p><ol start="3"><li>按获取时间过滤线索</li><li>按学员姓名查找线索</li><li>按手机号查找线索</li><li>按来源类型查找线索</li><li>点击领取客户功能——遵循<a href="#_线索分配机制_1">线索分配机制</a>。</li><li>按重复手机号查找线索——查重功能</li><li>单条线条的领取、作废、激活。</li></ol><h3 id="线索作废机制"><a href="#线索作废机制" class="headerlink" title="线索作废机制"></a>线索作废机制</h3><p>Pass</p><h3 id="线索分配机制"><a href="#线索分配机制" class="headerlink" title="线索分配机制"></a>线索分配机制</h3><p>在线索跟进前需要先对线索进行分配，建议分配方案：</p><ol><li>客服分配：对于客服以及业绩相关人自己录入的线索，自己觉得这条线索可以分配给自己跟进，为防止录入后被系统自动分配，可以在录入时，直接分配给自己。但会占用自主领取配额。当然也可以录入至公海池。ps:此种情况适用于手工录入线索</li><li>系统自动分析分配：系统根据当前校区咨询师个人数据进行分配（当前跟进量、跟进成功率、个人KPI等）ps：此种情况适用于自动获取线索，个人数据待设计。（考录因素：公海池总量）</li><li>分配条件：建立客服个人最高线索跟进量上限，方案2中系统自动分配的线索占60%，达到此值时，不在自动分配，但客服可以手动领取公海池中的线索，给予客服人员自主选择适合自己线索的权力，直至手动领取上限为个人最高线索量的40%。</li><li>特殊情况：</li></ol><p>合作校的线索，直接进入报名，客服为系统客服，咨询为系统咨询。</p><p>客服手工录入：此类线索不占用最高线索量，允许线索量溢出。</p><p>咨询手工录入：此类线索不占用最高线索量，允许线索量溢出。</p><p>自然上门线索为咨询手工录入，此类线索录入必须强制选择已到访。</p><p>Ps：自动分配还要考虑在线状态，暂不上线。长时间未被分配的线索要提醒部门长进行及时分配。</p><h2 id="线索跟进"><a href="#线索跟进" class="headerlink" title="线索跟进"></a>线索跟进</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>当线索经过分配机制分配后，线索进入线索跟进阶段。记录了当客户被分配到客服、咨询师后，客服、咨询师对线索的跟进记录以及跟进进度的记录。此部分是客服人员与咨询人员共同协作的过程。</p><h3 id="字段-1"><a href="#字段-1" class="headerlink" title="字段"></a>字段</h3><p>Ps：线索进入客服环节后，线索获取中的字段进行全部显示，但渠道类型、获取时间、意向课程、备注字段不可再编辑，其他字段可以根据跟进过程中拿到的最新信息进行信息的更新。需要新填写的字段描述如下：</p><p>跟进状态：跟进状态近似于一个线索的进度，进度阶段为：无法成交、意向中、成功约访、已到访、已试听、业务成单。跟进状态的选择为单向，只能向前走，不能回退。如跟进过成中出现意外导致跟进失败，在最后有跟进失败的选择。对每个跟进阶段的描述如下：</p><ol><li>待跟进：未开始跟进的线索。</li><li>下次联系：与用户沟通后，用户表现出有一定的意向，但无到访的意向时，选择此选项，选择此选项后需要填写下次联系时间，用于提醒下次联系时间。</li><li>成功约访：经过沟通后，用户有兴趣来学校看看，则选择此选项。并对客户预约到访的时间进行约访安排。约访时要考虑家长是否要当天试听。不需要试听，只是访问校区，则进行约访安排，选择访问校区、约访时间接待人即可。需要的话要提前安排试听，需要试听点击预约试听中的是，选择校区以及试听课程后，点击查询会显示出该校区此课程的课程表以及该校区有空闲的教师，并提供课程表中课程和教师的试听转单率以及课程目前可<strong>插班人数</strong>，客服根据数据进行选择。Ps：设计要求：选择成功约访后，预约试听默认关闭，并要求输入约访安排中的约访校区、约访时间、接待人。如果打开预约试听，则隐藏约访安排，并选择试听课，根据试听安排生成试听校区、试听时间、接待人、试听课程、试听老师。其中试听安排与约访安排中的三个相同字段储存可以共用。Ps：约访时间或试听时间不得比当天晚于14天（为后面的<a href="#_线索自动回收机制">线索自动回收机制</a>打基础）</li><li>已到访：到这一步则进入咨询师跟进阶段，负责的咨询师为上一步中的接待人。此状态指客户已经到校访问。与成功约访类似，到访后根据到访后的实际情况进行填写。如只是到访并未试听，则要填写到访记录，填写到访校区、到访时间、接待人。如到访后试听了，需要填写试听记录，填写试听校区、试听时间、接待人id、试听课程、试讲老师。在咨询师打开此状态后，读取成功约访中的数据，咨询师按照实际情况修改数据后进行提交。提交数据后，要生成试听记录和到访记录，并且所有的试听记录要展示在线索详情中。</li><li>无法成交：线索被分配后，经过沟通后，用户完全没有需求，则选择此选项，并对选择二级菜单中选项，无需求、号码错误、其他。选择此项基本确定不在跟进此线索，所以不要轻易选择。选择后无法再预约到访、试听，但是可以直接报名。选择此项后，提交数据时弹窗提醒是否直接放回公池。并填写放回原因。（弹窗为优化体验功能，后期迭代更新）</li><li>已报名：即此线索已经报名。此选项无需选择输入，当线索报名后自动更新为已报名。判断条件为点击了线索转学员并新建合同订单且付费后。所有的新学员必须通过线索转创，所以不存在绕过线索新建学员的情况。线索为无法成交的也可以最终更新为已报名。</li></ol><p>以上所有提到的时间，不能选择已过去的时间</p><p>Ps：跟进状态说明：按照以上状态从上至下单向流动，不可回流。当线索状态为成功约访并填写相关数据提交后，因其他原因需要修改，则进入线索中进行修改。已过约访时间后，未填写已到访的，客服要进行原因检查。首先对接接待人确认是否已到访未录入系统，若是，督促录入。若否，对客户进行回电咨询原因并重新确定约访时间。当然，此过程是客服与咨询通力协作的过程，此处为两者交接阶段，两人要交流，客户未能赴约，互相沟通，也不是非要客服去对接咨询师，咨询师发现客户未能按照到访规划到访时，也可及时对接客服了解情况，以免错过销售时机。</p><p>当线索状态进行到已到访并填写相关数据提交后，客户对课程仍有疑惑，此时可能需要再次预约试听。此后咨询在跟进过程中获取到客户最新的到访试听需求则新建一条预约信息，填写内容与成功约访中的填写相同，且提交后更新覆盖此过程中的老数据，只需要保存新的数据即可。但此时此条线索的状态是已到访，因为客户确实已经来过一次，此处保存的是最新的线索状态。只是客户又约了一次到访。</p><p>当客户再次到访后，在线索详情界面新建一次到访记录，填写内容与已到访中相同，提交后要对此次记录储存，而不是覆盖原纪录。当然客户未预约直接到访也是要记录的。也就是说已到访与成功约访没有依赖关系。同样的，两种状态与填写内容的关系仅存在第一次，内容依赖状态，状态更新到相应进度后，是可以修改约访内容和新建到访记录的。</p><p>标签：对线索进行打标。（拓展功能，后期迭代中更新）</p><p>本次跟进记录：此处记录了跟进过程中的各项记录。其中包括：本次跟进时的线索状态，本次跟进时间，本次跟进人，本次跟进的文字记录。对各项数据详细说明如下：</p><ol><li>线索状态：即登记跟进记录时，抓取此刻的线索状态。</li><li>本次跟进时间：即本次跟进的时间。</li><li>本次跟进人：即登陆用户。</li><li>本次跟进记录：即本次跟进过程的详细记录，文字形式。</li></ol><p>放回公池：当跟进状态选择了无法成交后，咨询师可以将线索放回公池。放回时要选择放回的原因（原因待定）。</p><p>报名：按钮放在列表记录的操作中，点击报名打开新新建合同界面在新的标签中，同时悬浮新增学员表单，自动关联此学员，按照<a href="#_学员管理">学员管理</a>录入学员信息，保存后，关联此学员，继续按照合同管理录入合同信息后保存。此操作分为了新建学员和新建合同，如果新建学员过程中保存后中断操作，保存新建的学员信息。此时继续在线索中点击报名时，仍打开新建合同界面在新的标签中，但是不在悬浮新建学员的界面。</p><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>线索被主动放回时，将跟进状态重置为待跟进并清除下次联系、成功约访、无法成交下级的内容，但已到访的到访记录、试听记录以及跟进记录不清除。线索重新分配后重新开始循环。</p><h3 id="线索自动回收机制"><a href="#线索自动回收机制" class="headerlink" title="线索自动回收机制"></a>线索自动回收机制</h3><p>为促进员工对线索的跟进积极性，我们设计了线索自动回收机制，描述如下：</p><ol><li>线索分配后1天未沟通自动回收。线索分配后，24小时之内必须将线索状态调整为非待跟进状态，否则线索将自动回收至公海池。</li><li>线索分配后3天未成功邀约自动回收。判定时，只要状态在成功邀约或成功邀约之后即可。</li><li>线索分配后15天未能到访或试听，线索自动回收。判定时，线索状态只要在已到访或已到访之后即可。</li><li>线索分配后30天线索未报名自动回收。判定时，线索状态只要不是已报名就自动回收。</li></ol><p>所有时间点判定时，只要状态为无法成交，也自动回收。</p><h2 id="学员管理"><a href="#学员管理" class="headerlink" title="学员管理"></a>学员管理</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>在线索中点击报名，即开始录入学员信息。（暂时只设置一个录入接口，在此页面只提供查询功能以及修改功能，不提供新增学员功能，所有学员必须通过招生模块，防止出现学员无来源信息）</p><h3 id="新建填写字段"><a href="#新建填写字段" class="headerlink" title="新建填写字段"></a>新建填写字段</h3><p>线索id：来源线索的id；</p><p>学号：学员的编号，按照固定的格式。目前是YYMMDD+4位流水号；</p><p>录入日期：表单录入日期，作为学生入学日期；</p><p>学员姓名：学生的名字, 默认读取对应线索信息，更改保存同时更新线索列表中的性别信息，保持两表信息一致，且每次修改都要更新两表的信息；</p><p>家长信息：学生的家长信息，存入新的表中，同时用于与公众号的对接。一个家长可以同时拥有多个学员。同样，一个学员也可以添加多个家长。</p><p>归属校区：学员的上课校区；</p><p>学管师：负责此学员的学管师；</p><p>来源类型：学员的来源类型。默认读取对应线索的类型不可更改，日后兴许有用；</p><p>来源渠道：学员的来源渠道。默认读取对应线索的类型不可更改，日后兴许有用；</p><p>在读学校：学员目前在读的学校；</p><p>年级：学员目前在读的年级；</p><p>出生日期：学员出生日期，可以做生日关怀。</p><p>学员性别：学生性别，默认读取对应线索信息，更改保存同时更新线索列表中的性别信息，保持两表信息一致，且每次修改都要更新两表的信息。</p><p>状态：</p><p>备注：新增学员时对学员的备注。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>学员信息录入后不可以删除，特别是已经有关联合同、缴费、排课等记录的学员。</p><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><p>Pass</p><h3 id="单项操作"><a href="#单项操作" class="headerlink" title="单项操作"></a>单项操作</h3><p>报名：链向<a href="#_合同管理">新增合同</a>页面并关联此学员；</p><p>学生课表：</p><p>查询合同</p><p>关联家长</p><p>回访记录：</p><p>跨校区：</p><p>转校区：</p><h2 id="合同管理"><a href="#合同管理" class="headerlink" title="合同管理"></a>合同管理</h2><p>合同管理用于记录学员报名后选择报读课程后生成的合同明细。</p><h3 id="新建合同字段"><a href="#新建合同字段" class="headerlink" title="新建合同字段"></a>新建合同字段</h3><p>学员：选择以报名的学员，同时带出学员的基本信息，姓名、电话、渠道来源、学校；</p><p>签约日期：合同的签订日期；</p><p>合同类型：分为新签、续签、拓课。自动生成，不可编辑。</p><ol><li>新签：学员之前无任何合同</li><li>续签：学员之前有合同</li><li>拓课：学员之前有合同且本次合同课程与之前类型不同</li></ol><p>报名课程：子表单录入，可以新建多条记录</p><ol><li>课程编号：课程管理中的课程编号</li><li>课程名称：课程管理中的课程名称</li><li>单价：课程管理中的课程单价</li><li>课时：此课程的报名课时</li><li>课程金额：单价*课时</li><li>优惠方案：选择活动管理中的活动</li><li>优惠金额：优惠方案的优惠金额</li><li>折后金额：优惠后的此课程应收金额</li><li>备注：此课程的备注</li><li>删除：点击删除此课程</li></ol><p>结算：对合同的课程金额进行汇总，分以下四个汇总项</p><ol><li>合同金额：课程金额的总和</li><li>优惠总额：优惠金额的总和</li><li>直减优惠：对合同金额直接增减</li><li>合同应收：合同金额-优惠总额-直减优惠</li></ol><p>对内备注：系统内备注</p><p>对外备注：打印在打印单上的备注</p><h2 id="收退款管理"><a href="#收退款管理" class="headerlink" title="收退款管理"></a>收退款管理</h2><p>当合同提交后，需要对合同进行收款，每笔收款进行一次记录，一个合同可以对应多条收款，不能多笔收款进行汇总一次录入，防止财务对账麻烦。</p><p>收款后可进行退款，退款与收款数据可放在同一张表，前端考虑是否要做两个栏目。</p><h3 id="收款-新建收款字段"><a href="#收款-新建收款字段" class="headerlink" title="收款 新建收款字段"></a>收款 新建收款字段</h3><p>收款编号：收款的编号。格式待定</p><p>合同：搜索合同编号选择要收款的合同；</p><p>收款人：读取登陆人，不能更改，虚拟账号没有收款权限；</p><p>操作人：当前操作人-登陆人，不可更改；</p><p>收款项目：定金或尾款；</p><p>收款时间：当前操作时间，可调整；</p><p>待收款额：当前合同总额-已收款额；</p><p>收款额：本次收款金额；</p><p>备注：本次收款说明；</p><p>业绩分配：当以上信息点击保存后，自动弹出业绩分配的界面，业绩分配分为三个部分，线索获取业绩、客服业绩、课程顾问业绩。</p><p>线索获取：获取线索的业绩记录，自动获取对应线索的获取渠道的负责部门和负责人，当线索的渠道为多部门协助渠道时，将此渠道的所有获取部门和此渠道的负责人拉取做业绩平分；</p><p>客服业绩：自动获取对应线索的负责客服，全额分配；</p><p>顾问业绩：自动过去对应线索的负责课程顾问，全额分配；</p><p>Ps：收款业绩的分配从点击收款完成时就将分配记录写入到数据库中，弹窗只做分配结果的展示，同时允许修改。直接写入的目的时防止收款后直接关闭浏览器出现业绩未分配的情况，导致出现收款金额与业绩分配金额不匹配的情况。</p><h1 id="1级标题"><a href="#1级标题" class="headerlink" title="1级标题"></a>1级标题</h1><h2 id="公司管理"><a href="#公司管理" class="headerlink" title="公司管理"></a>公司管理</h2><p>各公司管理，添加公司时填写公司名称、公司电话、公司地址、联系人、联系电话、公司法人后保存。各公司数据不能互通。</p><h2 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h2><p>组织管理用于管理一家公司中的分公司、分校、部门以及其他的管理。</p><h3 id="新建填写字段-1"><a href="#新建填写字段-1" class="headerlink" title="新建填写字段"></a>新建填写字段</h3><p>组织名称：组织的名字；</p><p>电话：组织的对外电话。如分公司前台电话，校区前台电话，部门电话。可以为空；</p><p>归属上级：此组织的上级组织；</p><p>类型：组织的类型。（分公司、校区、部门、其他），4个类型可以写死；</p><p>负责人：该组织的负责人，如分公司总经理，校区校长，部门长，小组长；</p><p>联系方式：负责人的联系方式；</p><p>地址：该组织的地址，校区类型一定要填且填清楚，用于前台表单提供校区信息。（可以储存经纬度，用于网页展示地图，给客户更详细的地址信息，后期开发）；</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>新建组织时，选择组织类型的时候，4个组织类型要分级别，总公司默认已存在且只存在一个，级别从大向小依次为分公司、校区、部门、其他，新建时，大组织下面可以有任何级别的小组织，但是小组织下不能新建大组织。作为教育公司的主体。校区的标识要打好，用于提供给其他模块以及网站表单服务。组织管理中兼并了校区管理。</p><h2 id="权限管理、角色管理、职位管理"><a href="#权限管理、角色管理、职位管理" class="headerlink" title="权限管理、角色管理、职位管理"></a>权限管理、角色管理、职位管理</h2><p>权限管理是管理系统中的重要部分，保证的人员的操作与数据安全。权限管理是可操作权限的最小颗粒，角色管理是桥接员工与权限的桥梁，角色中的角色权限是权限的集合。</p><p>通过将权限授权给角色，再将员工分配角色的方式使得相同角色的员工拥有相同的权限。是否员工可以不通过角色直接获得授权，有两种观点各有利弊。</p><ol><li>员工可以直接获得授权</li></ol><p>参考资料：<a href="https://www.cnblogs.com/hnsongbiao/p/5173878.html" target="_blank" rel="noopener">https://www.cnblogs.com/hnsongbiao/p/5173878.html</a></p><p>判定时，取角色权限与员工直接获得的权限的并集。好处是自由度高，更方便。坏处是影响规范性与可维护性，员工可以不走桥，大家作小船过去了。</p><ol start="2"><li>员工只能通过角色获得授权</li></ol><p>参考资料：<a href="https://blog.csdn.net/k7Jz78GeJJ/article/details/78489155" target="_blank" rel="noopener">https://blog.csdn.net/k7Jz78GeJJ/article/details/78489155</a></p><p>用户必须通过角色获得权限，特殊权限也必须通过建立新的角色的方式进行授权，好处就是前者的坏处，坏处就是前者的好处。</p><p>两种方式的选择就在于，企业的员工兼职岗位的复杂性，如一个校长同时他也是一名老师，同时他还负责招生，同时他还要收款。此时员工的角色很复杂，他是一名校长，同时还要上课，有着老师的角色，同时拥有财务的职能。这种情况明显是前者的授权方式方便的多，反之员工角色分明则后者更好。</p><p>归根到底强调一件事情：<strong>权限的管理，如何从公司制度上重视？</strong></p><p>即如何规范权限的分配，即那个部门哪个员工要哪个权限都需要进行审批或邮件知会后才能帮其配置，还有哪些数据要设置权限，哪些操作要设置权限，这些权限管理过程才是权限系统的核心，恰恰这些核心的东西在系统上是体现不出来的。</p><p>前期的不经意就会在后期会变成麻烦，不仅影响业务效率，更会导致风险危机。</p><p>权限管理最终是为了风控，如果权限的风控意识没做好，权限系统做的再好也是枉然。</p><h2 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h2><p>公司员工管理，同时也是系统用户管理。</p><h3 id="新建填写字段-2"><a href="#新建填写字段-2" class="headerlink" title="新建填写字段"></a>新建填写字段</h3><p>登录名：系统登陆名称；</p><p>账号类型：分为：1、全职，即全职员工。2、兼职，即兼职员工。3、虚拟，即虚拟账号，不能登陆，只作为其他模块的支持标识。例如机器客服、虚拟教师。同时，若系统按用户量销售定价，虚拟账户不占用额度；</p><p>姓名：员工姓名；</p><p>电话：员工电话；</p><p>是否教师：此员工是否为教师；</p><p>公司：员工所在公司；</p><p>部门：员工所在部门；</p><p>角色：员工拥有的角色权限；</p><h2 id="课程管理"><a href="#课程管理" class="headerlink" title="课程管理"></a>课程管理</h2><p>课程即学校的产品，有课程以及其他的产品，例如材料费等，这里的课程其实就是收费项目。</p><h3 id="新建填写字段-3"><a href="#新建填写字段-3" class="headerlink" title="新建填写字段"></a>新建填写字段</h3><p>分类：大的选择分类，可以分两个页面，选择项目的分类，是主营的课程还是其他的费用；</p><p><strong>第一类-主产品：课程 填写字段：</strong></p><p>课程名称：课程的名称，命名最好是有一定的规律；</p><p>适用校区：课程适用的校区，并填写在课程此校区的价格；</p><p>课时数：课程的课时数，默认为1；</p><p>课程单价：课程一个课时的价格；</p><p>课程时长：课程上一个课时的时间；</p><p>可用活动：此课程可以使用的活动；</p><p>锁定课程：在新建合同时，此课时的课时是否可以修改，一般固定课时包时不能修改课时的。</p><p><strong>第二类-附属品-其 他 填写字段</strong></p><p>项目名称：收费项目的名称——&gt;与<strong><em>课程名称</em></strong>共用；</p><p><strong><em>适用校区：</em></strong>收费项目可用的校区；</p><p>课时数：空</p><p>价格：收费项目价格——&gt;与<strong><em>课程单价</em></strong>共用；</p><p>课程时长：空</p><p><strong><em>可用活动</em></strong>：收费项目可参加的活动。</p><h3 id="课程查询功能"><a href="#课程查询功能" class="headerlink" title="课程查询功能"></a>课程查询功能</h3><ol><li>按课程名称模糊查找</li><li>按校区查找</li><li>按大类查找</li></ol><h2 id="分班管理"><a href="#分班管理" class="headerlink" title="分班管理"></a>分班管理</h2><h3 id="一对一分班"><a href="#一对一分班" class="headerlink" title="一对一分班"></a>一对一分班</h3><h3 id="一对多分班"><a href="#一对多分班" class="headerlink" title="一对多分班"></a>一对多分班</h3><h3 id="班课分班"><a href="#班课分班" class="headerlink" title="班课分班"></a>班课分班</h3><h2 id="教师管理"><a href="#教师管理" class="headerlink" title="教师管理"></a>教师管理</h2><p>此模块对教师进行管理，包含教师的可教科目、校区、等信息。</p><h3 id="字段-2"><a href="#字段-2" class="headerlink" title="字段"></a>字段</h3><p>关联员工：选择教师的登陆账号；</p><p>教师姓名：教师的名字，学则关联员工后，直接读取员工信息，与员工表保持同步，不能编辑。</p><p>用户类型：读取员工管理中的用户类型；</p><p>可教科目：选择课程管理中的课程；</p><p>性别：读取员工管理中的性别，不可编辑；</p><p>联系方式：读取员工管理中的联系方式，不可编辑；</p><p>所属校区：教师所属的校区，默认是员工管理中的组织；</p><p>可跨校区：可以在非所属校区上课的校区，可多选。</p><p>教师等级：教师的级别，用于区分课时费；</p><p><em>课时薪资：每课时或人头的薪资，用于计算教师业绩，后期更新；</em></p><h2 id="渠道管理"><a href="#渠道管理" class="headerlink" title="渠道管理"></a>渠道管理</h2><p>渠道管理为线索获取中渠道来源服务，提供线索分类。渠道讲分为常规渠道与临时渠道。常规渠道为长期使用的渠道，临时渠道为阶段性使用的渠道，例如一次活动。</p><h3 id="渠道分类"><a href="#渠道分类" class="headerlink" title="渠道分类"></a>渠道分类</h3><p>渠道分类为下面的两个节点服务，新建分类时，填写分类名称，选择分类归属，确定归属后，只能在相应的节点中使用。</p><h3 id="常规渠道"><a href="#常规渠道" class="headerlink" title="常规渠道"></a>常规渠道</h3><p>新建常规渠道需要选择渠道分类中分类归属为常规渠道的分类名称，填写渠道来源、负责部门。输入url正则式，正则式用于匹配自动获取的线索的来源url，若渠道没有自动接入，则url正则式为空。</p><h3 id="临时渠道"><a href="#临时渠道" class="headerlink" title="临时渠道"></a>临时渠道</h3><p>临时渠道用于临时的活动，需要选择渠道分类中分类归属为临时渠道的分类名称，填写活动主题、活动时间、负责部门、负责人、活动地点、描述等信息。输入url正则式，正则式用于匹配自动获取的线索的来源url，若渠道没有自动接入，则url正则式为空。如果此次活动只有一个url则直接输入url，如果活动有多个url同时进行推广，如多人推广，则输入正则式进行匹配。若要识别推广人，建议url中带有员工id或工号，并将推广人信息抓取到线索获取中的录入人中。</p><h2 id="基础参数"><a href="#基础参数" class="headerlink" title="基础参数"></a>基础参数</h2><p>作废原因——&gt;线索-&gt;线索获取-&gt;标记作废</p><p>无法成交原因——&gt;线索-&gt;线索跟进-&gt;跟进状态—&gt;无法成交</p><p><strong>放回公池原因——&gt;线索-&gt;线索跟进-&gt;放回共池</strong></p><p>课程科目设置——&gt;课程管理-&gt;课程科目</p><h2 id="活动管理"><a href="#活动管理" class="headerlink" title="活动管理"></a>活动管理</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>活动管理不仅仅是为了新建合同中的价格调整，更多的是为了记录活动，活动结束后对活动进行复盘。</p><p>活动管理分为两个层级，活动和优惠方案，一次活动可以对应多个优惠方案。下面讲如何一档活动。</p><h3 id="填写字段"><a href="#填写字段" class="headerlink" title="填写字段"></a>填写字段</h3><p><strong>首先讲活动的情况填写</strong></p><p>活动名称：活动的主题名称；</p><p>活动状态：活动有效或无效；</p><p>活动时间：活动的可用时间，精确到时间；</p><p>适用校区：参加活动的校区；</p><p><strong>每档活动可以又不同的优惠方案，设计一个子表单：</strong></p><p><strong>打折：</strong></p><p>优惠类型：选择打折；</p><p>优惠数值：输入两位数字，后面自动追加%号；</p><p>优惠名称：默认生成打XX折，可以修改；</p><p>适用课程：优惠方案的可用课程。</p><p><strong>满减：</strong></p><p>优惠类型：选择满减;</p><p>满足金额：输入一个金额，单位为元；</p><p>减免金额：当付费金额达满足金额时，减免的金额；</p><p>优惠名称：默认生成减XX元，可以修改；</p><p>适用课程：优惠方案的可用课程。</p><p><strong>赠送：</strong></p><p>优惠类型：选择赠送;</p><p>赠送类型：选择礼品或者课时；</p><p>礼品名称/课时数：选择礼品时输入礼品名称（考虑建立礼品库或者做礼品库存管理），选择课时时，输入赠送课时数；</p><p>优惠名称：默认生成总送XX礼品或XX课时，可以修改；</p><p>适用课程：优惠方案的可用课程。</p><h2 id="员工管理-1"><a href="#员工管理-1" class="headerlink" title="员工管理"></a>员工管理</h2><h3 id="工作交接"><a href="#工作交接" class="headerlink" title="工作交接"></a>工作交接</h3><p>根据资源是公司且不跟员工走的原则，当员工发生变动时，例如离职、调岗等，在工作交接完成时，系统中所有归属原负责人的线索，全部转移到新员工。对此，系统要设计员工交接模块，模块详情，在文档后面会详细描述。且此原则适用于所有又员工字段的模块。</p><h1 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h1><h2 id="商品资料"><a href="#商品资料" class="headerlink" title="商品资料"></a>商品资料</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>用于录入查看可供采购的商品明细以及资料</p><h3 id="填写说明"><a href="#填写说明" class="headerlink" title="填写说明"></a>填写说明</h3><p>商品编号：商品的唯一编号；</p><p>大类：分为教学用品(JX)、办公用品(BG)、日用品(RY)。；</p><p>中类：大类的下级分类；</p><p>小类：中类的下级分类；</p><p>商品名称：商品的名称，要求阅读后可以知道商品大概是什么；</p><p>品牌：商品的品牌</p><p>规格：商品规格参数，如XX支/盒，XX张/包</p><p>采购单位：采购时给到供应商的单位，如盒、箱、包；</p><p>入库单位：最终进入公司仓库的单位，如一盒笔有12支，采购时采购单位为盒，但领用时会按支出库，则入库单位为 支 。入库单位即领用时出库的最小单位；</p><p>单位比例：即采购单位与入库单位的比，如12支/盒，则比例为1：12；</p><h2 id="采购申请"><a href="#采购申请" class="headerlink" title="采购申请"></a>采购申请</h2><h3 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h3><p>用于校区以及总部采购物品审批</p><h3 id="填写说明-1"><a href="#填写说明-1" class="headerlink" title="填写说明"></a>填写说明</h3><p>申请类型：采购单的申请类型，分为集中采购与零散采购，集中采购发起申请后由相关部门人员审核通过后统一集中进行采购。零散采购发起申请由相关部门审核通过后，自行采购；</p><p>申请人：默认填单人，不可更改；</p><p>申请部门：申请人所在部门，不可更改；</p><p>采购仓库：商品采购完成后，将入库的仓库；</p><p>申请日期：申请单填写日期</p><p>商品信息：商品编号、大类、中类、小类、品牌、规格、比例，取商品资料。</p><p>申请量：申请采购量，单位为采购单位。</p><p>入库单位量：通过申请量与比例计算得出入库单位量，自动计算，不可手动更改；</p><p>采购仓库存：采购仓库当前商品库存量；</p><p>总库存：所有仓库当前商品的库存量；</p><p>采购总量：整张采购单采购商品的总量；</p><p>操作：</p>]]></content>
      
      
      <categories>
          
          <category> 产品设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
            <tag> 教育 </tag>
            
            <tag> 管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyhton思维导图</title>
      <link href="/2019/11/03/python-xue-xi-bi-ji/pyhton-si-wei-dao-tu/"/>
      <url>/2019/11/03/python-xue-xi-bi-ji/pyhton-si-wei-dao-tu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/11/03/NpG6ACfkYgV2Pzc.png" alt="Python导图.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.python-模块</title>
      <link href="/2019/11/03/python-xue-xi-bi-ji/7.python-mo-kuai/"/>
      <url>/2019/11/03/python-xue-xi-bi-ji/7.python-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="模块的创建"><a href="#模块的创建" class="headerlink" title="模块的创建"></a>模块的创建</h2><p>在拓展名为.py的文件中编写函数或其他代码创建模块</p><p><strong>pizza.py</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""概述要制作的披萨"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Making a"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-inch pizza with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> topping <span class="token keyword">in</span> toppings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"- "</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用模块可以将函数储存在独立的文件中，隐藏代码的细节，将重点放在程序的高层逻辑上。还可以在众多不同的程序中重用函数。</p><h2 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h2><h3 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h3><p>使用 import 语句导入模块，需要模块在同级目录或特定的模块目录中。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pizza<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种导入方法会导入pizza.py 这个模块中所用的函数。</p><p><strong>调用函数</strong><br><em>module_name.function_name()</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pizza<span class="token comment" spellcheck="true"># 调用函数</span>pizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Making a16<span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> mushrooms<span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> green peppers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入指定的函数"><a href="#导入指定的函数" class="headerlink" title="导入指定的函数"></a>导入指定的函数</h3><p><strong>语法：*</strong>from module_name import function_name*  </p><p><strong>使用逗号分割函数名，可以导入多个函数</strong><br><em>from module_name import function_name1, function_name2, function_name3, …</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pizza <span class="token keyword">import</span> make_pizzamake_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Making a16<span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> mushrooms<span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> green peppers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入所有函数"><a href="#导入所有函数" class="headerlink" title="导入所有函数"></a>导入所有函数</h3><p>使用(*)运算符可以导入模块中所用的函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pizza <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 调用函数</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Making a16<span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> mushrooms<span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> green peppers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样导入的函数，无需使用句点表示法，但是，使用非自己编写的大型模块时，不推荐这样使用，因为导入的模块中，可能模块中的函数名称与项目中相同进而覆盖函数。</p></blockquote><h2 id="as语句"><a href="#as语句" class="headerlink" title="as语句"></a>as语句</h2><p>使用as语句可以给导入的函数或者模块起一个别名，方便使用。</p><h3 id="给函数指定别名-as"><a href="#给函数指定别名-as" class="headerlink" title="给函数指定别名 as"></a>给函数指定别名 as</h3><p>在导入时使用as可以给函数函数指定一个独一无二的别名。解决与现有程序中的名称冲突，或者函数名称太长，起一个简单的外号。</p><p><strong>语法：</strong> <em>from module_name import function_name as fn</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pizza <span class="token keyword">import</span> make_pizza <span class="token keyword">as</span> mp<span class="token comment" spellcheck="true"># 调用函数</span>mp<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Making a16<span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> mushrooms<span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> green peppers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给模块指定别名-as"><a href="#给模块指定别名-as" class="headerlink" title="给模块指定别名 as"></a>给模块指定别名 as</h3><p>也可以使用as 给模块指定别名</p><p><strong>语法：</strong> <em>import module_name as mn</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pizza <span class="token keyword">as</span> p<span class="token comment" spellcheck="true"># 调用函数</span>p<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Making a16<span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> mushrooms<span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span> green peppers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.python-dict字典</title>
      <link href="/2019/11/02/python-xue-xi-bi-ji/4-python-dict-zi-dian/"/>
      <url>/2019/11/02/python-xue-xi-bi-ji/4-python-dict-zi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="python字典的创建"><a href="#python字典的创建" class="headerlink" title="python字典的创建"></a>python字典的创建</h2><p>python中，字典用放在花括号中的一系列键-值对表示</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>字典中的值可以是任何的pyhton中的对象，如数字、字符串、列表乃至字典</p><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><h3 id="访问字典的值"><a href="#访问字典的值" class="headerlink" title="访问字典的值"></a>访问字典的值</h3><p>要获取字典中的值，可以指定字典名和放在方括号中的键</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> xiaoming<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h3><p>要向字典中添加键-值对，可依次指定字典名、用方括号括起来的键和相关的值</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span>info<span class="token punctuation">[</span><span class="token string">"sex"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"male"</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><p>要修改字典中的值，可依次指定字典名、用方括号括起来的键以及与该键关联的新值</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span>info<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除字典中的值"><a href="#删除字典中的值" class="headerlink" title="删除字典中的值"></a>删除字典中的值</h3><p>要删除字典中的一个键-值对，可以使用del语句将对应的键-值对直接删除</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span>  <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token keyword">del</span> info<span class="token punctuation">[</span><span class="token string">"sex"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><p>字典可以用于以各种方式储存信息，以此用多种遍历字典的方式：可以遍历字典的多用键-值对、键或值。</p><h3 id="遍历字典的键值对"><a href="#遍历字典的键值对" class="headerlink" title="遍历字典的键值对"></a>遍历字典的键值对</h3><p>可以使用for循环来遍历一个字典中的所有信息</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"value:"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> name<span class="token operator">>></span><span class="token operator">></span> value<span class="token punctuation">:</span> xiaoming<span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> age<span class="token operator">>></span><span class="token operator">></span> value<span class="token punctuation">:</span> <span class="token number">19</span><span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> sex<span class="token operator">>></span><span class="token operator">></span> value<span class="token punctuation">:</span> male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申明两个变量k、v储存键-值对中的信息，使用字典名和方法items()将返回一个键-值对列表，使用for循环，依次将键-值对赋值给k、v.</p><blockquote><p>for 循环字典时，键-值对返回的顺序可能与储存顺序不同，python不关系键-值对的储存顺序，只跟踪键和值之间的关联关系</p></blockquote><h3 id="遍历字典的所有键"><a href="#遍历字典的所有键" class="headerlink" title="遍历字典的所有键"></a>遍历字典的所有键</h3><p>在不需要字典中的值时，可以使用keys()方法获取字典的所有键。</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token keyword">for</span> k <span class="token keyword">in</span> info<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> name<span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> age<span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> sex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在遍历字典时，会默认遍历字典的所有的键，以此下列代码以上方效果相同</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token keyword">for</span> k <span class="token keyword">in</span> info<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> name<span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> age<span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> sex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照顺序遍历字典的所有键"><a href="#按照顺序遍历字典的所有键" class="headerlink" title="按照顺序遍历字典的所有键"></a>按照顺序遍历字典的所有键</h3><p>获取字典的元素时，获取顺序是不可预测的，可以使用sorted()来按照特定的顺序排列列表的副本</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token keyword">for</span> k <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>info<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> age<span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> name<span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">:</span> sex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历字典的所有值"><a href="#遍历字典的所有值" class="headerlink" title="遍历字典的所有值"></a>遍历字典的所有值</h3><p>当不需要字典中的key时，可以使用方法values()。</p><pre class="line-numbers language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token keyword">for</span> v <span class="token keyword">in</span> info<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> value xiaoming<span class="token operator">>></span><span class="token operator">></span> value <span class="token number">19</span><span class="token operator">>></span><span class="token operator">></span> value male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础-2list、tuple、set</title>
      <link href="/2019/10/31/python-xue-xi-bi-ji/3.python-ji-chu-list-lie-biao/"/>
      <url>/2019/10/31/python-xue-xi-bi-ji/3.python-ji-chu-list-lie-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>一组有序数据组成的序列</li><li>数据有先后顺序</li><li>数据可以不是同类型的</li></ul><h2 id="list的创建"><a href="#list的创建" class="headerlink" title="list的创建"></a>list的创建</h2><ul><li>直接创建</li></ul><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>用函数创建</li></ul><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token string">"zhang"</span>l <span class="token operator">=</span> list<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>创建一个只包含一个字符串的列表的列表</em></p><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token string">"zhang"</span>l <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'zhang'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="list的访问"><a href="#list的访问" class="headerlink" title="list的访问"></a>list的访问</h2><ul><li>使用下标（索引）访问</li><li>列表元素的索引从0开始</li></ul><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>索引不能超出元素总数量，否则引发IndexError</em></p><h2 id="修改、添加、删除元素"><a href="#修改、添加、删除元素" class="headerlink" title="修改、添加、删除元素"></a>修改、添加、删除元素</h2><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><p>修改列表的元素需要指定修改列表的元素索引，并指定该元素的新值</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">56</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="末尾添加元素"><a href="#末尾添加元素" class="headerlink" title="末尾添加元素"></a>末尾添加元素</h4><p>末尾添加元素可使用append()方法</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在元素指定位置添加"><a href="#在元素指定位置添加" class="headerlink" title="在元素指定位置添加"></a>在元素指定位置添加</h4><p>在元素指定位置添加使用insert()方法<br>在索引1的位置添加元素1，之后的元素向右移动</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="使用del语句删除元素"><a href="#使用del语句删除元素" class="headerlink" title="使用del语句删除元素"></a>使用del语句删除元素</h4><p>使用del删除元素需要知道元素的索引值，如下删除列表中的第二个数值（索引为1）</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token keyword">del</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用pop-方法弹出元素"><a href="#使用pop-方法弹出元素" class="headerlink" title="使用pop()方法弹出元素"></a>使用pop()方法弹出元素</h4><p>pop()方法可以弹出列表末尾的元素并可以赋值给一个变量继续使用</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>a <span class="token operator">=</span> l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="弹出任意位置的元素"><a href="#弹出任意位置的元素" class="headerlink" title="弹出任意位置的元素"></a>弹出任意位置的元素</h4><p>在pop中指定索引，可弹出指定位置的元素</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>a <span class="token operator">=</span> l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用del还是pop()？当一个元素需要删除且不再需要他时，使用del；删除后还需要使用时，使用pop()。</p></blockquote><h4 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h4><p>有时候并不知道元素的位置，只知道值，可以使用remove()方法</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>remove只会删除第一个匹配的值，如有多个相同的值，应使用循环删除。</p></blockquote><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><h3 id="列表永久排序"><a href="#列表永久排序" class="headerlink" title="列表永久排序"></a>列表永久排序</h3><p>列表的排序可以使用sort()方法。</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以向sort()传递参数reverse=True，反序排列列表</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="临时排序列表"><a href="#临时排序列表" class="headerlink" title="临时排序列表"></a>临时排序列表</h3><p>临时对列表排序可使用sortde()方法</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始的列表"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"临时排序的列表"</span><span class="token punctuation">,</span> sorted<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"再次打印开始的列表"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> 原始的列表 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> 临时排序的列表 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> 再次打印开始的列表 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样可以通过reverse=True参数倒叙排列列表</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始的列表"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"临时排序的列表"</span><span class="token punctuation">,</span> sorted<span class="token punctuation">(</span>l<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"再次打印开始的列表"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> 原始的列表 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> 临时排序的列表 <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> 再次打印开始的列表 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反序排列列表"><a href="#反序排列列表" class="headerlink" title="反序排列列表"></a>反序排列列表</h3><p>反序排列列表拍，可以使用reverse()方法</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>reverse 会将列表永久性反序，但可以再次调用reverse方法将顺序恢复</p></blockquote><h3 id="计算列表长度"><a href="#计算列表长度" class="headerlink" title="计算列表长度"></a>计算列表长度</h3><p>使用函数len()可以算出列表的 长度（元素个数）</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>len()计算 长度时，会从1开始</p></blockquote><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><h3 id="使用for循环遍历整个列表"><a href="#使用for循环遍历整个列表" class="headerlink" title="使用for循环遍历整个列表"></a>使用for循环遍历整个列表</h3><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建数字列表"><a href="#创建数字列表" class="headerlink" title="创建数字列表"></a>创建数字列表</h3><h4 id="使用range-函数"><a href="#使用range-函数" class="headerlink" title="使用range()函数"></a>使用range()函数</h4><p>使用range()可以生成一系列数字</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>range()生成的数字中，不会包含右边的数字</p></blockquote><h4 id="使用range-函数创建列表"><a href="#使用range-函数创建列表" class="headerlink" title="使用range()函数创建列表"></a>使用range()函数创建列表</h4><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用list()函数将range()的结果转换为列表</p></blockquote><p>range()还可以指定步长</p><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上，range会从1开始，每次+2进行数字生成</p><h4 id="数字列表的简单统计计算"><a href="#数字列表的简单统计计算" class="headerlink" title="数字列表的简单统计计算"></a>数字列表的简单统计计算</h4><table><thead><tr><th>函数</th><th>作用</th><th>实例</th></tr></thead><tbody><tr><td>min()</td><td>找出列表中的最小值</td><td>mi = min(list)</td></tr><tr><td>max()</td><td>找出列表中的最大值</td><td>ma = max(list)</td></tr><tr><td>sum()</td><td>求列表所有元素的和</td><td>s = sum(list)</td></tr></tbody></table><h3 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h3><h4 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h4><p><strong>对列表的一段进行截取</strong><br>切片注意取值范围，左包括右不包括</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 从索引1取值到索引3，但不包括索引3的值（15）</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>切片会创建一个新的列表，通过id可以判断</em></p><ul><li>切片的下标可以为空</li></ul><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 从0到3</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 从1到结束</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">{</span><span class="token punctuation">:</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 从头到尾</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>切片可以控制增幅，默认为1</li></ul><pre class="line-numbers language-pyhton"><code class="language-pyhton">l = [55, 22, 36, 15, 4]print(l[::2])  # 设置步长为2>>> [55, 36, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>切片下表可以超出范围，不会引发IndexError</li></ul><pre class="line-numbers language-pyhton"><code class="language-pyhton">l = [55, 22, 36, 15, 4]print([:100])>>> [55, 22, 36, 15, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>下标、增幅可以为复数</li><li>下标为负数表示从右往左</li><li>数组的最后一位的下标为 <strong>-1</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会打印空列表，因为切片是默认是从左往右的</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印对应内容，由于-1，会导致列表反序</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 由于左包括右不包括，需要从-4到-1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h4><p>列表的复制可以通过将老列表进行全部切片并赋值给新列表的方式</p><pre class="line-numbers language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> l1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不可以通过，直接将老列表变量赋值给新列表变量，这会使得新列表与老列表指向同一个列表，当老列表内容发生改变是，新列表也会改变</p></blockquote><pre class="line-numbers language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> l1  <span class="token comment" spellcheck="true"># 这不可行</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><p>元祖 与列表类似，只是列表是可以修改的，元祖是不可修改的。</p><h3 id="元祖的定义"><a href="#元祖的定义" class="headerlink" title="元祖的定义"></a>元祖的定义</h3><p>元祖使用() 圆括号来定义</p><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义一个只包含一个元素的元祖时，应该这样定以</p><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a>集合的特点</h3><ul><li>集合内的数据是无序的，无法使用索引、分片</li><li>集合内数据唯一，可以用来去重</li><li>集合内只可存放可哈希数据（str, int, float, tuple,冰冻集合等），不能存放不可哈希数据（list、dict）</li></ul><blockquote><p>可哈希数据：不可变的数据结构</p></blockquote><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">{</span>value01<span class="token punctuation">,</span>value02<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 或者</span>s <span class="token operator">=</span> set<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 示例</span>s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>parame <span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'1233'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#类似与列表推倒时的集合推倒时</span>s <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">"sdfwefag"</span> <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token string">"swa"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre><code>{&#39;2&#39;, &#39;1&#39;, &#39;3&#39;}{&#39;2&#39;, &#39;1&#39;, &#39;3&#39;}{&#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;d&#39;}</code></pre><h3 id="集合常用操作"><a href="#集合常用操作" class="headerlink" title="集合常用操作"></a>集合常用操作</h3><p><a href="https://www.runoob.com/python3/python3-set.html" target="_blank" rel="noopener">菜鸟教程关于集合</a></p><h4 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h4><p>s.add(x)<br>或<br>s.update(list1, list2) # 也可以是元祖、字典</p><pre class="line-numbers language-python"><code class="language-python">s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或者是</span>s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{32, 1, 2, 3, 4, 12}</code></pre><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p>1.s.remove(x)</p><blockquote><p>删除不错错在元素报错</p></blockquote><pre class="line-numbers language-python"><code class="language-python">s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{32, 2, 3, 4, 12}</code></pre><p>2.s.discard(x)</p><blockquote><p>不存在元素不报错</p></blockquote><pre class="line-numbers language-python"><code class="language-python">s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>{32, 2, 3, 4}</code></pre><ol start="3"><li>s.pop()<blockquote><p>随机弹出一个</p></blockquote></li></ol><h4 id="计算元素个数"><a href="#计算元素个数" class="headerlink" title="计算元素个数"></a>计算元素个数</h4><p>len(s)</p><h4 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h4><p>s.clean</p><h4 id="成员判断"><a href="#成员判断" class="headerlink" title="成员判断"></a>成员判断</h4><p>x in s<br>x not in s</p>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> python </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>师说系统培训</title>
      <link href="/2019/10/23/gong-zuo/shi-shuo-xi-tong-pei-xun/"/>
      <url>/2019/10/23/gong-zuo/shi-shuo-xi-tong-pei-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="更新目录"><a href="#更新目录" class="headerlink" title="更新目录"></a>更新目录</h1><table><thead><tr><th>日期</th><th>更新内容</th></tr></thead><tbody><tr><td>2019-10-27</td><td>首次培训</td></tr><tr><td>2019</td><td>补充退费说明</td></tr></tbody></table><h2 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h2><p><a href="https://www.shishuo.com/index.htm" target="_blank" rel="noopener">系统网站</a><br>做教育，用师说<br>长沙市师说网络科技有限公司是一个教育服务公司，我们通过产品和服务，帮助互联网时代的教育培训咨询机构<br>管门店、管员工、管客户、管资金，让教育培训更好做</p><h2 id="系统注册与登录"><a href="#系统注册与登录" class="headerlink" title="系统注册与登录"></a>系统注册与登录</h2><p>管理员添加员工后，员工通过<a href="https://passport.shishuo.com/login.htm" target="_blank" rel="noopener">登录地址</a>登录。</p><h3 id="扫码登录"><a href="#扫码登录" class="headerlink" title="扫码登录"></a>扫码登录</h3><p>扫码后需要输入手机号，手机号要与管理员添加的手机号匹配</p><h3 id="账号登录"><a href="#账号登录" class="headerlink" title="账号登录"></a>账号登录</h3><p>不想扫码绑定微信的，使用账号登录，首次登录没有密码，选择忘记密码，通过短信验证码找回密码后进行登录。</p><p><img src="https://i.loli.net/2019/10/23/KTnABaYEi714kph.png" alt="师说找回密码"></p><h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><p>根据目前我们校区情况，每家学校固定<strong>校长</strong>一名，负责校区日常招生、校区财务以及教务等工作。</p><p>总部设立<strong>招生部</strong>，负责各个校区流动招生支持</p><p>各自拥有权限如下</p><blockquote><p>管理员已在系统给相关账号按以上设置里相关权限</p></blockquote><h2 id="管理员其他操作"><a href="#管理员其他操作" class="headerlink" title="管理员其他操作"></a>管理员其他操作</h2><ul><li>部门设置</li><li>校区设置</li><li>设置校区负责人</li></ul><h2 id="校长系统相关操作"><a href="#校长系统相关操作" class="headerlink" title="校长系统相关操作"></a>校长系统相关操作</h2><h3 id="新建一个科目"><a href="#新建一个科目" class="headerlink" title="新建一个科目"></a>新建一个科目</h3><ol><li><p>选择教务-科目，点击右上角新增，输入科目名称，科目分类保持默认分类不变，点击<strong>保存</strong>。<br><img src="https://i.loli.net/2019/10/24/Iy98Ui4PTnHtmQs.png" alt="新建科目"></p></li><li><p>点击新建的科目中的<font style="font-weight:bold;" color="#188CEA" size="3">编辑</font>按钮</p></li><li><p>键入课时费，在线出售、赠送积分、会员折扣、暂时保持关闭，状态选择开启，若课程停止后可编辑选择状态-关闭。</p></li></ol><blockquote><p>课时费计算方式：例如如果我们全年课时费以2880为基准，全年96课时，则每节课时费为30元，参考下图设置。</p></blockquote><p><em>这里设置的价格，一般认为是科目的原价，与学员最终的成交价格无关，学员成交价格还要考虑用户的满减、优惠券等活动设置</em></p><p><img src="https://i.loli.net/2019/10/24/XwxCJhAZ3qjovKu.png" alt="编辑科目.png"></p><h3 id="新建一个班级"><a href="#新建一个班级" class="headerlink" title="新建一个班级"></a>新建一个班级</h3><h4 id="新建班级"><a href="#新建班级" class="headerlink" title="新建班级"></a>新建班级</h4><ol><li><p>选择教务-班级，点击右上角的<strong>新增</strong></p></li><li><p>输入班级名称、开班日期、欲招人数、选择班主任（选择校长即可，会影响移动端的一些权限）<strong>主要开启未到扣费</strong></p></li><li><p>收费模式选择课时，点击<font color="#188CEA" size="3">添加科目</font>选择我们在<a href="#toc-heading-8">新建一个科目</a>中新建的科目，课时费以及课时总数根据实际情况填写</p></li></ol><p><em>这里的课时费仍然不是最终成交价格</em></p><p><strong>参考图片</strong><br><img src="https://i.loli.net/2019/10/25/uZItF3gyas2HCN6.png" alt="新建班级.png"></p><ol start="4"><li><p>点击<strong>保存</strong></p></li><li><p>对班级进行招生</p></li></ol><h4 id="班级排课"><a href="#班级排课" class="headerlink" title="班级排课"></a>班级排课</h4><p>新建的班级需要排课，点击班级中操作的<font color="#188CEA" size="3">科目（排课）</font>，点击<font color="#188CEA" size="3">按周排课</font>，按需填写相关信息。</p><p><img src="https://i.loli.net/2019/10/25/hWMFBoOCkc3wrtU.png" alt="排课1.png"></p><p>再点击里面的添加规则，填写相关信息，（课时根据我们的情况，每次课程2小时，建议对外宣传我们的全年课时96，每次消耗2课时），完成点击添加</p><p><img src="https://i.loli.net/2019/10/25/2RSWkaDgEGHKiz5.png" alt="排课规则.png"></p><p>回到按周排课界面，检查是否冲突后保存即可</p><blockquote><p>班级一旦保存，无法删除，可以选择毕业。</p></blockquote><h3 id="招生"><a href="#招生" class="headerlink" title="招生"></a>招生</h3><blockquote><p>咨询师招生操作与校长相同，只是没有查看校区线索的权限</p></blockquote><h4 id="新建一条线索"><a href="#新建一条线索" class="headerlink" title="新建一条线索"></a>新建一条线索</h4><p><strong>点击招生-我的线索</strong> 右上角的新增，填写客户的信息，其中加<font color="red" size="3">＊</font>的信息是必填的，线索详情根据实际情况填写，能拿到的信息尽量填写完整。首次联系信息按需填写，建议填写下次联系时间，到时见后会通过微信通知及时跟进线索。填写相关信息后保存。</p><p><img src="https://i.loli.net/2019/10/25/qExmkb3TVhDvKFu.png" alt="新增线索.png"></p><blockquote><p>新增线索时，重复的手机号码是无法录入的。</p></blockquote><p><img src="https://i.loli.net/2019/10/25/fm6v7rPAM84EDS2.png" alt="重复手机号.png"></p><h4 id="客户信息的更新"><a href="#客户信息的更新" class="headerlink" title="客户信息的更新"></a>客户信息的更新</h4><p> 保存好在我的线索中会出现刚刚编辑的线索信息。如后期获得了客户的新信息可以通过点击对应线索的编辑进行信息的更新。</p><h4 id="客户的跟进"><a href="#客户的跟进" class="headerlink" title="客户的跟进"></a>客户的跟进</h4><p>点击操作中的<font color="188CEA" size="3">跟进</font>，根据本次跟进内容填写，点击提交。会生成一条跟进记录。多次跟进可以多次添加。</p><p><img src="https://i.loli.net/2019/10/25/sxCXd2GPnNVuSB1.png" alt="添加跟进信息.png"></p><h4 id="客户邀约"><a href="#客户邀约" class="headerlink" title="客户邀约"></a>客户邀约</h4><h5 id="添加邀约信息"><a href="#添加邀约信息" class="headerlink" title="添加邀约信息"></a>添加邀约信息</h5><p>当线索跟进到一定程度，可能会邀约客户到校参观。此时可使用邀约功能。点击<strong>操作-跟进</strong> ，操作与添加跟进信息类似，只是跟进类型选择邀约。选择承诺上门时间以及下次联系时间，建议下次联系时间与承诺上门时间相同。这样可以在客户上门时提醒自己，且客户爽约也可以及时再次跟进客户。</p><p><img src="https://i.loli.net/2019/10/25/Lb63GCXMSJZQkuH.png" alt="客户邀约.png"></p><h5 id="客户到访与爽约"><a href="#客户到访与爽约" class="headerlink" title="客户到访与爽约"></a>客户到访与爽约</h5><p>添加完成客户邀约信息后，到约访日期，若客户到访，可点击<strong>操作-跟进</strong>选择下方的邀约记录，在后面的操作中点击<font color="#188CEA" size="3">到访</font>，填写客户到访后与客户的沟通情况，并填写下次跟进时间保存。若客户爽约，则点击<font color="#188CEA" size="3">爽约</font>。</p><p><img src="https://i.loli.net/2019/10/25/b6ZDYO7rKuEocdA.png" alt="客户到访与爽约.png"></p><h5 id="上门的审核"><a href="#上门的审核" class="headerlink" title="上门的审核"></a>上门的审核</h5><p>客户到访确认后，在<strong>招生-上门审核</strong>中会有相关的到访信息，校长应对到访信息进行审核，确认相关信息是否真实到访。</p><blockquote><p>此功能主要用于市场人员的业绩考核，例如成功邀约1人奖励5元等奖励方案的执行，建议按实际情况进行审核，方便后续的工作开展。</p></blockquote><h4 id="学员试听"><a href="#学员试听" class="headerlink" title="学员试听"></a>学员试听</h4><p>客户跟进过程中，一般会要求上下试听课程。要上试听课，必须先称为我们的学员才能上试听课程，点击我的线索中的<strong>操作-学生</strong>，点击<font color="#188CEA" size="3">【添加】</font>入校学生，输入相关信息点击<strong>提交</strong></p><p><img src="https://i.loli.net/2019/10/25/wNhEWuQqeFj7bd5.png" alt="添加入校学生.png"></p><p>添加后在入校学生列表中就可以看见（如果关闭了，再次点击线索操作中的学生即可打开）。如过一条线索产生两名学员，也可以再次点击<font color="#188CEA" size="3">【添加】</font>进行添加操作。</p><blockquote><p>此时的学员是一个未交费的学员</p></blockquote><p>点击入校学生列表-操作中的<font color="#188CEA" size="3">试听</font></p><p>这里显示的是我们的班级排课，相当于是插班试听，也可以在系统中设置一些没课的时间专门的试听课程班级用于试听。</p><p><img src="https://i.loli.net/2019/10/25/5kPmfDWhRYUrvOT.png" alt="试听选课.png"></p><h5 id="试听课的考勤"><a href="#试听课的考勤" class="headerlink" title="试听课的考勤"></a>试听课的考勤</h5><p>安排学员试听后，可对学员进行考勤。点击<strong>教务-课表</strong>选择对应的上课时间，点击<font color="#188CEA" size="3">学生考勤</font>，选择对应的学员考勤后提交。</p><p><img src="https://i.loli.net/2019/10/25/pCNPIV5UDhWsn7R.png" alt="试听学员考勤.png"></p><p>以上就完成了学员的试听课</p><h3 id="学员报名"><a href="#学员报名" class="headerlink" title="学员报名"></a>学员报名</h3><p>成交后，在系统中对学员进行报名收费操作</p><h4 id="科目报名"><a href="#科目报名" class="headerlink" title="科目报名"></a>科目报名</h4><p>选择<strong>教务-学生</strong> 打开学员列表，在要报名的学员的操作中点击<font color="#188CEA" size="3">报班缴费</font>，在缴费界面中点击<span style="border-radius: 3px; background: #188eee;  color: #FFF;">+选择科目</span>，选择学生要报名的科目，输入数量（课时），如需要减免则输入减免额度，点击<strong>确认收款</strong>，在实际的收款方式中输入收款额后确认收款</p><p>收款完成后可以打印票据（需要打印机）</p><p><img src="https://i.loli.net/2019/10/25/whRzmIv5eysqbu6.png" alt="报名.png"></p><p><img src="https://i.loli.net/2019/10/25/Ohy9f36NAcqFJTx.png" alt="确认收款.png"></p><h5 id="学员课时转移"><a href="#学员课时转移" class="headerlink" title="学员课时转移"></a>学员课时转移</h5><p>需要注意的是，通过科目报名的学员是没有具体的班级的，所以是没有进行排课的。需要对学员购买的课时进行转移。</p><p>具体操作如下：</p><p>点击<strong>教务-学生</strong>,再学生列表中点击对应的学员姓名，在这里可以看到学员的所有相关信息，  我们点击科目列表，选择<strong>操作</strong>中的<font color="#188CEA" size="3">转移课时</font>，输入需要转移的课时数，点击确认，即可将学员报名科目的课时转入班级中。</p><p><img src="https://i.loli.net/2019/10/25/aUquRMQ65pcimEl.png" alt="转移课时.png"></p><h4 id="班级报名"><a href="#班级报名" class="headerlink" title="班级报名"></a>班级报名</h4><p>班级报名相对于科目报名要简单一下，以为  学员报名以后直接进入班级，无需进行课时的转移。但班级报名的前提是系统中已经进行了班级开班的设置。</p><p>选择<strong>教务-学生</strong> 打开学员列表，在要报名的学员的操作中点击<font color="#188CEA" size="3">报班缴费</font>，在缴费界面中点击<span style="border-radius: 3px; background: #188eee;  color: #FFF;">+选择班级</span>，选择要报名的班级，点击<font color="#188CEA" size="3">选择</font>，确认优惠信息，点击确认收款，在对应的收款方式中输入收款金额，点击<span style="border-radius: 3px; background: #188eee;  color: #FFF;">确认</span>即可。</p><h3 id="学员及教师考勤"><a href="#学员及教师考勤" class="headerlink" title="学员及教师考勤"></a>学员及教师考勤</h3><h4 id="学员考勤"><a href="#学员考勤" class="headerlink" title="学员考勤"></a>学员考勤</h4><p>学员报名分入班级并排课后，到上课时间要对学员进行考勤。</p><p>依次点击<strong>教务-课表</strong>，在对应的上课时间操作中点击<font color="#188CEA" size="3">学生考勤</font></p><p><img src="https://i.loli.net/2019/10/26/5F72Ke9WMSjGTVl.png" alt="学员考勤.png"></p><p>在需要考勤的学员选中考勤，或者点击标题栏的考勤进行全选考勤，点击<span style="border-radius: 3px; background: #188eee;  color: #FFF;">提交</span></p><p>三个选项的解释</p><table><thead><tr><th>考勤</th><th>未到</th><th>补</th></tr></thead><tbody><tr><td>正常学员考勤，学员上课，扣课时费</td><td>学员未到，是否扣课时费取决于是否在班级中开启了未到扣费</td><td>学员未到，进入补课程序。适用于请假学员</td></tr></tbody></table><h4 id="教师考勤"><a href="#教师考勤" class="headerlink" title="教师考勤"></a>教师考勤</h4><p>依次点击课表中，在对应的上课时间的操作中点击<font color="red" size="3">老师考勤</font>，</p><p><img src="https://i.loli.net/2019/10/26/Y1wXOPUDlgsj7me.png" alt="老师考勤1.png"></p><p>确认信息，点击<span style="border-radius: 3px; background: #188eee;  color: #FFF;">提交</span></p><blockquote><p>关于提成计算暂时不使用，等基本模块学学习完成后再使用教师以及市场人员的提成功能。</p></blockquote><p><font color="red" size="3">教师考勤前必须学员先考勤，教师才能考勤。</font>，</p><h3 id="学员补课"><a href="#学员补课" class="headerlink" title="学员补课"></a>学员补课</h3><p>如果学员进行了请假，在考勤时选择了补，则会出现在<strong>教务-补课</strong>的列表中，选中要补课的学员，点击分班补课，选择合适的班级（班级不能是此学员已在的班级），点击选择即可将学员分入此次上课时间的班级中，到时进行考勤即可。</p><p><img src="https://i.loli.net/2019/10/26/UzI9yi3PsMw1Zca.png" alt="分班补课.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏一些好东西</title>
      <link href="/2019/10/22/shou-cang/shou-cang-yi-xie-hao-dong-xi/"/>
      <url>/2019/10/22/shou-cang/shou-cang-yi-xie-hao-dong-xi/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>地址</th><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://sm.ms" target="_blank" rel="noopener">https://sm.ms</a></td><td>SM.MS 图床</td><td>免费的图床网站</td></tr><tr><td><a href="https://wordhtml.com/" target="_blank" rel="noopener">https://wordhtml.com/</a></td><td>WORDHTML</td><td>在线word转HTML</td></tr><tr><td><a href="https://tool.lu/markdown/" target="_blank" rel="noopener">https://tool.lu/markdown/</a></td><td>markdownb编辑器</td><td>在线编辑MD，在线HTML转MD</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2019/10/12/linux/linux-chang-yong-ming-ling/"/>
      <url>/2019/10/12/linux/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>chgrp 用户名 文件名 -R</td><td>更改文件组 -R表示向下递归</td></tr><tr><td>chown 用户名 文件名 -R</td><td>更改文件所有者 -R 表示向下递归</td></tr><tr><td>touch <strong>file_name</strong></td><td>新建文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> 收藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2019/10/12/shou-cang/git-chang-yong-ming-ling/"/>
      <url>/2019/10/12/shou-cang/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/11/10/MQVrh5aLYiF2tXg.jpg" alt="git"></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git branch <new_branch></new_branch></td><td>新建本地分支</td></tr><tr><td>git branch</td><td>查看本地分支</td></tr><tr><td>git remote -v</td><td>查看远程仓库地址</td></tr><tr><td>git branch -r</td><td>查看远程分支</td></tr><tr><td>git branch -a</td><td>查看本地、远程分支</td></tr><tr><td>git remote update origin –prune</td><td>更新远程分支列表</td></tr><tr><td>git fetch</td><td>将将远程主机的最新内容拉到本地(手动合并)</td></tr><tr><td>git remote set-url origin &lt;new.git.url/here&gt;</td><td>远程仓库</td></tr><tr><td>git branch –set-upstream-to=origin/<branch></branch></td><td>设置跟踪远程分支</td></tr><tr><td>git checkout -b <name> origin/<name></name></name></td><td>将远程分支拉去到本地并切换到此分支</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> git </tag>
            
            <tag> 积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础-2str字符串</title>
      <link href="/2019/10/11/python-xue-xi-bi-ji/2.python-ji-chu-str-zi-fu-chuan/"/>
      <url>/2019/10/11/python-xue-xi-bi-ji/2.python-ji-chu-str-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p><em>字符串是一系列的字符，在Python中，用引号括起来的是字符串，可以使单引号，也可以是双引号。三引号可以表示多行</em></p><h2 id="字符串的表示"><a href="#字符串的表示" class="headerlink" title="字符串的表示"></a>字符串的表示</h2><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span>  <span class="token string">'zhangsan'</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>name <span class="token operator">=</span> <span class="token triple-quoted-string string">"""zhangsan"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><ul><li>用一个特色的方法表示出一系列不方便写出的内容，例如回车键、换行符、退格键</li><li>借助反斜杠字符，接上一个或者几个字符，此时这些字符表示的不再是原来的意思，进行了转移</li><li>不同系统对换行符由不同的表示<ul><li>Windows： \n</li><li>Linux：\r\n</li></ul></li></ul><p><em>实例</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  转义单引号</span>s <span class="token operator">=</span> <span class="token string">'Let\'s Go'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>Let's Go<span class="token comment" spellcheck="true"># 换行转移</span>s <span class="token operator">=</span> <span class="token string">'hello \n word'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> hello  word<span class="token comment" spellcheck="true"># 路径的表示</span>s <span class="token operator">=</span> <span class="token string">'c:\\user\\abv'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">:</span>\user\abv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在Python中，代码末尾单个单斜杠结束代表这行代码未结束，换行继续写。</strong></p><p><em>常用转义字符</em></p><table><thead><tr><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td>\</td><td>(在行尾时)    续行符</td></tr><tr><td>\\</td><td>反斜杠符号</td></tr><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\e</td><td>转义</td></tr><tr><td>\000</td><td>空</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\v</td><td>纵向制表符</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\oyy</td><td>八进制数，yy代表的字符，例如：\o12代表换行</td></tr><tr><td>\xyy</td><td>十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\other</td><td>其它的字符以普通格式输出</td></tr></tbody></table><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><ul><li>把字符按照一定的格式进行打印或者填充</li></ul><h3 id="传统格式化"><a href="#传统格式化" class="headerlink" title="传统格式化 %"></a>传统格式化 %</h3><ul><li>使用％进行格式化</li></ul><p>占位符列表</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>十进制整数</td></tr><tr><td>%f, %F</td><td>浮点数十进制形式</td></tr></tbody></table><p>占位符的使用</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># %s表示简单的字符串</span>s <span class="token operator">=</span> <span class="token string">"My name is %s"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token operator">%</span>小明<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> My name <span class="token keyword">is</span> 小明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>占位符一般只能被同类型替换，或者替换类型能被转换成占位符的类型</em></p><p>多个占位符的使用，只需要用括号括起来，依次填入</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"I am %fKG weight, %fm Heigh."</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">60.4</span><span class="token punctuation">,</span> <span class="token number">175.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> I am <span class="token number">60.400000</span> weeightt<span class="token punctuation">,</span> <span class="token number">175.</span>200000m Heigh<span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 可以指定浮点数小数位数</span>s <span class="token operator">=</span> <span class="token string">"I am %.2fKG weight, %.2fm Heigh."</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">60.4</span><span class="token punctuation">,</span> <span class="token number">175.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> I am <span class="token number">60.40</span> weeightt<span class="token punctuation">,</span> <span class="token number">175.</span>20m Heigh<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="format格式化"><a href="#format格式化" class="headerlink" title="format格式化"></a>format格式化</h3><ul><li>使用函数形式进行格式化，代替%</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式1</span>s <span class="token operator">=</span> <span class="token string">"{} {}!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Hello<span class="token punctuation">,</span> world<span class="token comment" spellcheck="true"># 方式2</span>s <span class="token operator">=</span> <span class="token string">"{} {}!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Hello<span class="token punctuation">,</span> world <span class="token comment" spellcheck="true"># 方式3 指定参数位置</span>s <span class="token operator">=</span> <span class="token string">"{1} {0}!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Hello<span class="token punctuation">,</span> world<span class="token comment" spellcheck="true"># 参数不足时也可按指定的索引填充，但索引值不能超出提供数量。</span>s <span class="token operator">=</span> <span class="token string">"I love {0} and {0} love me!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> I love 小明 <span class="token operator">and</span> 小明 love me!<span class="token comment" spellcheck="true"># 使用命名参数</span>s <span class="token operator">=</span> "我们是<span class="token punctuation">{</span>school_name<span class="token punctuation">}</span>，我们的网址是<span class="token punctuation">{</span>url<span class="token punctuation">}</span>。s <span class="token operator">=</span> s<span class="token punctuation">.</span>format<span class="token punctuation">(</span>school_name<span class="token operator">=</span><span class="token string">"猪小萌"</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">"www.zxmedu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> 我们是猪小萌，我们的网址是www<span class="token punctuation">.</span>zxmedu<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true"># 使用字典，需要解包</span>s <span class="token operator">=</span> "我们是<span class="token punctuation">{</span>school_name<span class="token punctuation">}</span>，我们的网址是<span class="token punctuation">{</span>url<span class="token punctuation">}</span>。s_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"shcool_name"</span><span class="token punctuation">:</span><span class="token string">"猪小萌"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"www.zxmedu.com"</span><span class="token punctuation">}</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>fotmat<span class="token punctuation">(</span><span class="token operator">**</span>s_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> 我们是猪小萌，我们的网址是www<span class="token punctuation">.</span>zxmedu<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true"># 格式化浮点数指定小数位数。</span>s <span class="token operator">=</span> <span class="token string">"I am {:.2f} m height"</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> I am <span class="token number">1.70</span> m height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="str-内置函数"><a href="#str-内置函数" class="headerlink" title="str 内置函数"></a>str 内置函数</h2><h3 id="查找类函数"><a href="#查找类函数" class="headerlink" title="查找类函数"></a>查找类函数</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><strong>查找字符串中是否包含一个子串</strong></p><p>语法：S.find(sub[, start[, end]]) -&gt; int</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"My name is xiaoming"</span>s1 <span class="token operator">=</span> <span class="token string">"xiaoming"</span><span class="token comment" spellcheck="true"># 返回第一次发现这个字符串的位置索引，第二次的处理。</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">11</span>s2 <span class="token operator">=</span> <span class="token string">"xiaohong"</span><span class="token comment" spellcheck="true"># 未找到匹配项时返回-1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 在指定的区间查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>lfind、rfind 分别代表从左开始查找与从右开始查找。</p></blockquote><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>语法：S.index(sub[, start[, end]]) -&gt; int</p><p>用法与find相同，区别是<strong>find未找到时会返回-1，index会报ValueError</strong></p><h3 id="判断类函数"><a href="#判断类函数" class="headerlink" title="判断类函数"></a>判断类函数</h3><p><em>此类函数一般都是使用is开头</em></p><h4 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha()"></a>isalpha()</h4><p><strong>判断一个字符串是否全部由字母构成</strong></p><p>使用注意：</p><ul><li>字符串至少包含一个字符，空字符返回false。</li><li>汉字被认为是alpha，此函数不能作为区分英文字母还是汉字。</li><li>空格不是alpha，包含空格的字符串返回false</li></ul><h4 id="isdigit、isnumeric、isdecimal"><a href="#isdigit、isnumeric、isdecimal" class="headerlink" title="isdigit、isnumeric、isdecimal"></a>isdigit、isnumeric、isdecimal</h4><p><strong>判断一个字符串是否是数字</strong></p><ul><li>isdigit: Unicode数字、byte数字（单字节）、全角数字（双字节）、罗马数字</li><li>isnumeric: Unicode数字、全角数字（双字节）</li><li>isdecimal: Unicode数字、汉字数字、全角数字（双字节）、罗马数字</li></ul><p><em>避免使用，尽量使用正则表达式</em></p><h4 id="islower"><a href="#islower" class="headerlink" title="islower"></a>islower</h4><p><strong>判断一个字符串是否全部为小写</strong></p><ul><li>空格不影响判断，全部为小写的字符串中包含空格返回True</li><li>中文返回False</li></ul><h3 id="内容判断类"><a href="#内容判断类" class="headerlink" title="内容判断类"></a>内容判断类</h3><p><strong>startswith/endswith判断一个字符串是否以xxx开头/结尾</strong></p><ul><li>语法: str.startswith(prefix[,staart[,end]]) - &gt; bool</li><li>prefix: 被检查字符串; start: 开始位置; end: 结束位置;</li></ul><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"I am xiaoming"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"I am"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="操作类函数"><a href="#操作类函数" class="headerlink" title="操作类函数"></a>操作类函数</h3><h4 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h4><p><strong>主要用于删除字符串两边的空格</strong></p><ul><li>语法strip(self, chars=None, /)</li><li>可以指定chars 要删除的字符</li><li>不是删除一个字符，是整个符合条件的连续的所有字符串</li><li>同类型的还有lstrip()、rstrip()</li></ul><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"zhang xiaoming"</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  xiaoming <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p><strong>主要用于字符串拼接</strong></p><ul><li>需要一个可以迭代的内用作为参数</li><li>功能是吧啊可迭代字符串拼接在一起，中间使用调用的字符串拼接</li></ul><pre class="line-numbers language-python"><code class="language-python">ss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token string">"xiao"</span><span class="token punctuation">,</span> <span class="token string">"ming"</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token string">"-"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>join<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> zhang<span class="token operator">-</span>xiao<span class="token operator">-</span>ming<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> python </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础-1函数</title>
      <link href="/2019/10/10/python-xue-xi-bi-ji/6.python-han-shu/"/>
      <url>/2019/10/10/python-xue-xi-bi-ji/6.python-han-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。<br>函数能提高应用的模块性，和代码的重复利用率。</p></blockquote><h2 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h2><ul><li>函数代码块由def关键字开头，后面接函数的名称和小括号 <strong>()</strong> </li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><p><strong>基本语法</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> functionname <span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"此处放函数的文档说明"</span>    function_suite    <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_str</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"将传入的文本打印出来"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><p>直接输入函数的名字加上括号即可调用，括号中是否由内容根据实际情况</p><p><strong>调用函数实例</strong></p><pre class="line-numbers language-python"><code class="language-python">print_str<span class="token punctuation">(</span><span class="token string">"我调用函数"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><ul><li>调用函数时，函数返回的一个执行结果  </li><li>使用return返回 </li><li>可以没有返回值，但建议没有返回值时也写一个return None， 没有返回值的函数默认返回None</li><li>函数一旦执行return， 则函数立即结束，后面的代码不再执行</li></ul><h2 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h2><p> <em>参数负责给函数传递一些必要的数据或者信息</em></p><ul><li>形参：在函数定义的时候要用到的参数，没有具体的值，占位</li><li>实参： 在函数调用时，实际传入的值</li></ul><h3 id="实参的传递"><a href="#实参的传递" class="headerlink" title="实参的传递"></a>实参的传递</h3><h4 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h4><blockquote><p>在调用函数时，Python必须将函数调用中的每个实参关联到函数定义中的一个形参，最简单的关联方式是基于实参的顺序，这种关联方式称为位置实参</p></blockquote><p><em>实例</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> Nonetest<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数时将实参1, 2, 3 分别对应到形参a, b, c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red" size="3">位置实参的顺序以及数量很重要，必须一一对应关联</font></p><h4 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h4><blockquote><p>关键子实参是调用函数时传递给函数的名称-值对，直接在实参中将名称和值关联起来了，因此向函数传递参数时不会混淆，关键字实参无需考虑函数调用的实参顺序</p></blockquote><p><em>实例</em></p><pre class="line-numbers language-python"><code class="language-python">test<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red" size="3">使用关键子参数时，一定要准确的指定函数中定义的形参名</font></p><h4 id="默认值实参"><a href="#默认值实参" class="headerlink" title="默认值实参"></a>默认值实参</h4><blockquote><p>在编写函数时，可以给每个形参指定默认值。在调用函数时给形参提供了实参时，Python将使用提供的实参，否则使用形参的默认值</p></blockquote><p><em>实例</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> Nonetest<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这两种调用方法都是可以的，第一个未提供c值，pyhton会使用默认值3。第二种提供c=4，pyhton会使用提供的实参4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red" size="3">使用默认值时，在形参中必须先列出没有默认值的形参，再列出有默认值的形参，否则Python无法正确理解位置实参</font></p><h4 id="收集实参"><a href="#收集实参" class="headerlink" title="收集实参"></a>收集实参</h4><blockquote><p>有时候并不知道函数需要接受多少个实参，python允许函数从调用语句中收集任意数量的实参。</p></blockquote><p><em>实例</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数，打印出班级学生姓名</span><span class="token keyword">def</span> <span class="token function">stu_name</span><span class="token punctuation">(</span><span class="token operator">*</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>stu_name<span class="token punctuation">(</span><span class="token string">'zhang'</span><span class="token punctuation">,</span> <span class="token string">'liu'</span><span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>形参<em>name是. 中的\</em>会创建一个名为names的空元祖，在调用时，会将所有的值装入元祖。</p><ul><li>关键字收集实参</li></ul><blockquote><p>有时候需要接受任意数量的的实参，但预先并不知道传递给函数的是什么信息，可以使用关键字收集实参。</p></blockquote><p><em>实例</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 收集班级中所有的学生的相关信息</span><span class="token keyword">def</span> <span class="token function">stu_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name    info<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> age    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        info<span class="token punctuation">[</span><span class="token string">'k'</span><span class="token punctuation">]</span> <span class="token operator">=</span> v    <span class="token keyword">return</span> infostu_info<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">,</span> tel<span class="token operator">=</span><span class="token string">'1302566'</span><span class="token punctuation">,</span> hobby<span class="token operator">=</span><span class="token string">'basketball'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**会收集多余位置实参的信息，并将信息在函数内部组成一个dict，在函数直接将info当成一个dict使用。</p><p><font color="red" size="3">以上实参可以混合使用，但在定义函数是必须按照<strong>位置实参</strong>→<strong>收集实参</strong>→<strong>收集关键字实参</strong>的顺序定义，在调用时，对应位置的参数进入位置实参，多余的进入收集实参，键值对进入收集关键字实参。 </font></p>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> python </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python入门-2条件与循环语句</title>
      <link href="/2019/10/10/python-xue-xi-bi-ji/5.python-tiao-jian-yu-xun-huan-yu-ju/"/>
      <url>/2019/10/10/python-xue-xi-bi-ji/5.python-tiao-jian-yu-xun-huan-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h1><ul><li>顺序</li><li>循环</li><li>分支</li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li>分支结构基本语法<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> 判断条件：  执行语句<span class="token number">1</span>……  执行语句<span class="token number">2</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Python程序语言中指定任何非0和非空（null）值为True，0或者null为false  </p></blockquote></li></ul><p><strong>当判断条件成立（返回True）时执行语句1、 2，可以有多行，但必须在相同的缩进内。</strong></p><h3 id="双向分支"><a href="#双向分支" class="headerlink" title="双向分支"></a>双向分支</h3><ul><li>双向分支基本语句<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token punctuation">:</span>  执行语句<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  执行语句<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>  执行语句<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  执行语句<span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>当判断条件成立时，执行语句1、 2，否则执行语句3、 4</strong></p><h3 id="多路分支"><a href="#多路分支" class="headerlink" title="多路分支"></a>多路分支</h3><p>有很多分支的情况</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>    执行语句<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    执行语句<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elif</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>    执行语句<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    执行语句<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    执行语句<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    执行语句<span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p></blockquote><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><em>循环语句允许我们执行一个语句或语句组多次</em></p><p>python中的循环类型</p><table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td>while循环</td><td>给定的判断条件为True时执行循环体，否则退出循环</td></tr><tr><td>for循环</td><td>重复执行语句</td></tr></tbody></table><p>循环控制语句</p><table><thead><tr><th>控制语句</th><th>描述</th></tr></thead><tbody><tr><td>break语句</td><td>在语句块执行过程中终止循环，并跳出整个循环</td></tr><tr><td>continue语句</td><td>在语句块执行过程中终止当前循环，执行下一次循环</td></tr><tr><td>pass语句</td><td>pass 是空语句，保持程序的完整性，什么也不做</td></tr></tbody></table><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>基本语句</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>    语句<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 另一种，else不是必须的</span><span class="token keyword">while</span> 判断条件<span class="token punctuation">:</span>    语句<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span>：    语句<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当判断条件为True时，语句1将执行，执行完成后再次判断<strong>判断条件</strong>是否成立，如还是成立的则继续循环执行，直至<strong>判断条件</strong>不成立为止。</p><p>while 可以使用continue和break来跳过循环，continue跳过本次，break跳出整个循环</p><p><strong>无限循环：</strong> 如果条件判断永远为True，循环将无限的执行下去</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><em>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</em></p><p>基本语法格式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><p>break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。</p><p>break语句用在while和for循环中。<br>在嵌套循环中，会终止当前循环块</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>Python continue 语句跳出本次循环，而break跳出整个循环。<br>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。<br>continue语句用在while和for循环中。</p><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p>Python pass 是空语句，是为了保持程序结构的完整性。<br>pass 不做任何事情，一般用做占位语句。</p><h3 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h3><ul><li>生成有序数列</li><li>生成的序列可以定制<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生成1-100的序列</span>number <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成时左包括右不包括 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 入门 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python入门-1变量、数据类型、运算符</title>
      <link href="/2019/10/07/python-xue-xi-bi-ji/1.python-ru-men-bian-liang-shu-ju-lei-xing-yun-suan-fu/"/>
      <url>/2019/10/07/python-xue-xi-bi-ji/1.python-ru-men-bian-liang-shu-ju-lei-xing-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="风格指南"><a href="#风格指南" class="headerlink" title="风格指南"></a>风格指南</h2><ul><li><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/#" target="_blank" rel="noopener">Python风格指南</a></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><em>注释解释器不会去执行,直接跳过</em></p><h3 id="注释的写法"><a href="#注释的写法" class="headerlink" title="注释的写法"></a>注释的写法</h3><ul><li>行注释:以井号(#)开头 可以单独行,也可以在代码后面</li><li>块注释:以三个单引号或者双引号开头并结束,中间可以包裹多行内容<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这里是行注释,机器不会运行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello word"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""这里是块注释可以写很多行..."""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="注释原则"><a href="#注释原则" class="headerlink" title="注释原则"></a>注释原则</h3><ul><li>复杂代码注释</li><li>注释不是越多越好</li><li>建立有效的沟通</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><em>变量就是一个可以重复使用的量</em></p><h3 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h3><ul><li>变量名只能包含字母、数字和下划线，变量名字可以使用字母或者下划线开头，但不可以使用数字开头。如 1_message</li><li>变量名不能包含空格</li><li>变量名不能使用Python关键字、保留字、函数，如print<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看关键字方法</span><span class="token keyword">import</span>  keyword  <span class="token comment" spellcheck="true">#引入关键子模块</span><span class="token comment" spellcheck="true"># 打印关键字</span><span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>变量名应该简短且具有描述性</li><li>不建议以下划线开头命名变量，因为以下划线开头的变量具有特殊含义</li><li>大小写敏感，age 和 Age不一样</li><li>可以使用中文，但强烈不建议使用</li><li>推荐使用posix命名规则<blockquote><p>posix命名规则</p><ul><li>多个单词使用下划线链接</li><li>单词全部小写</li></ul></blockquote></li></ul><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><ul><li><p>常用赋值方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将10 赋值给size</span>size <span class="token operator">=</span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给多个变量赋同一个值</p><pre class="line-numbers language-python"><code class="language-python">size1 <span class="token operator">=</span> size2 <span class="token operator">=</span> size3 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>size1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>size2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>size3<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一行代码给多个变量赋值</p><pre class="line-numbers language-python"><code class="language-python">size1<span class="token punctuation">,</span> size2<span class="token punctuation">,</span> size3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token keyword">print</span><span class="token punctuation">(</span>size1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>size2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">12</span><span class="token keyword">print</span><span class="token punctuation">(</span>size3<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>六种标准数据类型<ul><li>数字 Number</li><li>字符串 Str</li><li>列表 List</li><li>原则 tuper</li><li>字典 dict</li><li>集合 set</li><li>布尔值 bool</li><li>None</li></ul></li></ul><p><strong>使用字符串时注意引号匹配</strong></p><h3 id="数字类型Number"><a href="#数字类型Number" class="headerlink" title="数字类型Number"></a>数字类型Number</h3><ul><li>数字类型分类<ul><li>整数<ul><li>没有小数部分</li><li>包含正数、复数、0</li></ul></li><li>浮点数<ul><li>带小数点的数字称为浮点数 </li></ul></li><li>科学计数法<ul><li>科学计数法在python中的表示<pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10e2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">1000.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>复数<br>复数在python中的表示<pre class="line-numbers language-python"><code class="language-python">python中，用j<span class="token operator">/</span>J表示复数的虚部a <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span>b <span class="token operator">=</span> <span class="token number">3j</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3j</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><em>字符串是一系列的字符，在Python中，用引号括起来的是字符串，可以使单引号，也可以是双引号。三引号可以表示多行</em></p><p>字符串的表示</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span>  <span class="token string">'zhangsan'</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>name <span class="token operator">=</span> <span class="token triple-quoted-string string">"""zhangsan"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul><li>布尔值用来表示真假</li><li>只有两个值 Ture/False</li><li>在Python中，布尔值可以当做数字使用：Ture = 1， False = 0</li></ul><h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><ul><li>表示没有，返回一个空</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符的分类  </p><ul><li>算术运算符</li><li>比较(关系)运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>身份运算符</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>假设变量a = 1, b = 2</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>两个对象相加</td><td>a + b &gt;&gt;&gt;3</td></tr><tr><td>-</td><td>两个对象相减</td><td>a - b &gt;&gt;&gt;-1</td></tr><tr><td>*</td><td>两个对象相乘或者是返回若干次的字符串</td><td>a*b &gt;&gt;&gt;2</td></tr><tr><td>/</td><td>除法运算</td><td>b/a &gt;&gt;&gt;2</td></tr><tr><td>//</td><td>地板除,取整</td><td>9//2 &gt;&gt;&gt;4</td></tr><tr><td>%</td><td>取模(取余)</td><td>9%2 &gt;&gt;&gt;1</td></tr><tr><td>**</td><td>幂运算</td><td>a**b &gt;&gt;&gt;1</td></tr></tbody></table><blockquote><p>注意：Python2.x 里，整数除整数，只能得出整数。如果要得到小数部分，把其中一个数改成浮点数即可。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">2</span><span class="token number">0.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">/</span>float<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">0.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>假设变量a = 1, b = 2</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>比较连个对象是否相等</td><td>a == b &gt;&gt;&gt;False</td></tr><tr><td>!=</td><td>比较两个对象是否不相等</td><td>a != b &gt;&gt;&gt;True</td></tr><tr><td>&gt;</td><td>比较x是否大于y</td><td>a &gt; b &gt;&gt;&gt;False</td></tr><tr><td>&lt;</td><td>比较x是否小于y</td><td>a &lt; b &gt;&gt;&gt; True</td></tr><tr><td>&gt;=</td><td>返回x是否大于等于y</td><td>a &gt;= b &gt;&gt;&gt;Flase</td></tr><tr><td>&lt;=</td><td>返回x是否小于等于y</td><td>a &lt;= b &gt;&gt;&gt;True</td></tr></tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>假设变量a = 1, b = 2</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算</td><td>c = a + b 将a + b 的运算结果赋值给c</td></tr><tr><td>+=</td><td>加法赋值运算</td><td>c += a 等效与 c = c + a</td></tr><tr><td>-+</td><td>减法赋值运算</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算</td><td>c % a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算</td><td>c *<em>= a 等效于 c = c *</em> a</td></tr><tr><td>//=</td><td>地板除赋值运算</td><td>c //= a 等效于 c = c//a</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>“与”运算，x、y全部为True返回True，否则返回Flase</td><td>True and False &gt;&gt;&gt;False</td></tr><tr><td>or</td><td>“或”运算，x、y全部为Flase返回False，否则返回True</td><td>True or False &gt;&gt;&gt;True</td></tr><tr><td>not</td><td>“非”运算，取反</td><td>not False &gt;&gt;&gt;True</td></tr></tbody></table><blockquote><p>逻辑运算存在短路问题，程序一旦确定逻辑运算结果不在进行后面的代码</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 短路案例，由于提前确定了c的值为True，程序不在往下运行，不在打印"b"</span><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span>c <span class="token operator">=</span> a<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> b<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p><em>检测一个成员是否在某个实例里面</em></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在序列中找到指定的值返回True，否则返回False</td><td>1 in [1, 2, 3]    &gt;&gt;&gt;True</td></tr><tr><td>not in</td><td>如果在序列中没有找到制定的值返回True，否则返回False</td><td>1 not in [1, 2, 3]        &gt;&gt;&gt;False</td></tr></tbody></table><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>判断两个变量是不是引用自一个对象</td><td>x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>判断两个变量是不是引用自不同对象</td><td>x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><blockquote><p>可以简单理解为他们指向的内存地址是否相同<br>is 与 == 区别：<br>is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。</p></blockquote><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><p>从高到底以此为：  </p><ul><li>小括号内优先级最高</li><li>**    指数 (最高优先级)</li><li>~ + -    按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</li><li>* / % //    乘，除，取模和取整除</li><li>+ -    加法减法</li><li>&gt;&gt; &lt;&lt;    右移，左移运算符</li><li>&amp;    位 ‘AND’</li><li>^ |    位运算符</li><li>&lt;= &lt; &gt; &gt;=    比较运算符</li><li>&lt;&gt; == !=    等于运算符</li><li>= %= /= //= -= += <em>= *</em>=    赋值运算符</li><li>is is not    身份运算符</li><li>in not in    成员运算符</li><li>not and or    逻辑运算符</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-基础</title>
      <link href="/2019/09/03/qian-duan/vue-ji-chu/"/>
      <url>/2019/09/03/qian-duan/vue-ji-chu/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="Vue-js-安装"><a href="#Vue-js-安装" class="headerlink" title="Vue.js 安装"></a>Vue.js 安装</h1><ul><li><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><pre class="line-numbers language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--对于制作原型或学习，你可以这样使用最新版本--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h1 id="实例化Vue对象"><a href="#实例化Vue对象" class="headerlink" title="实例化Vue对象"></a>实例化Vue对象</h1><ul><li><h2 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h2><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 实例化Vue对象</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#vue-app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'米斯特五'</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/*   el: element 需要获取的元素,一定是html中的根容器  data: 用于数据的存储  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h2 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h2><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h1 id="数据和方法"><a href="#数据和方法" class="headerlink" title="数据和方法"></a>数据和方法</h1><ul><li><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><ul><li><h3 id="js文件中的数据"><a href="#js文件中的数据" class="headerlink" title="js文件中的数据"></a>js文件中的数据</h3><blockquote><p>在data中声明</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#vue-app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 数据放在data中</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'米斯特五'</span><span class="token punctuation">,</span>      job<span class="token punctuation">:</span> <span class="token string">'web开发'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在html中使用</p><blockquote><p>包裹在双花括号中变量名字</p></blockquote><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Name: {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Job: {{job}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>放在method</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#vue-app'</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>          greet<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">'Good Morning'</span> <span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用</p></blockquote><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ greet() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h1 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h1><blockquote><p>使用v-bind 进行属性绑定</p></blockquote><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>website<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>websiteTag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><blockquote><p>使用v-on:xxx=”method” 绑定事件<br>也可使用@代替v-on:</p></blockquote><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Events<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 长一岁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtract<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 减一岁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>My age is {{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><blockquote><p>.stop<br>  .prevent<br>  .capture<br>  .self<br>  .once<br>  .passive</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- 阻止单击事件继续传播 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 提交事件不再重载页面 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 修饰符可以串联 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 只有修饰符 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 添加事件监听器时使用事件捕获模式 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --></span>  <span class="token comment" spellcheck="true">&lt;!-- 即事件不是从内部元素触发的 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h1 id="键盘事件及按键修饰符"><a href="#键盘事件及按键修饰符" class="headerlink" title="键盘事件及按键修饰符"></a>键盘事件及按键修饰符</h1><ul><li><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django rest framework</title>
      <link href="/2019/05/23/django/django-rest-framework/"/>
      <url>/2019/05/23/django/django-rest-framework/</url>
      
        <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="使用pip安装"><a href="#使用pip安装" class="headerlink" title="使用pip安装"></a>使用pip安装</h3><pre><code>pip install djangorestframework</code></pre><h3 id="在django项目app中配置app"><a href="#在django项目app中配置app" class="headerlink" title="在django项目app中配置app"></a>在django项目app中配置app</h3><pre class="line-numbers language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span><span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span><span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span><span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span><span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span><span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span><span class="token string">'app01.apps.App01Config'</span><span class="token punctuation">,</span><span class="token string">'rest_framework'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在setting中配置restframework相关设置</li></ul><pre class="line-numbers language-python"><code class="language-python">REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true"># Use Django's standard `django.contrib.auth` permissions,</span><span class="token comment" spellcheck="true"># or allow read-only access for unauthenticated users.</span><span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'rest_framework.permissions.IsAdminUser'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><h3 id="to-dict"><a href="#to-dict" class="headerlink" title="to_dict"></a>to_dict</h3><h3 id="django自带系列化器"><a href="#django自带系列化器" class="headerlink" title="django自带系列化器"></a>django自带系列化器</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core <span class="token keyword">import</span> serializersserializers<span class="token punctuation">.</span>serializer<span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">,</span> QuerySet<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="django-rest-framerwork-序列化器"><a href="#django-rest-framerwork-序列化器" class="headerlink" title="django rest framerwork 序列化器"></a>django rest framerwork 序列化器</h3><ul><li>定义</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PublisherSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    address <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        instance:实例， 原数据实例        validated_data: 验证过的数据，前台传来的        """</span>        instance<span class="token punctuation">.</span>name <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>address <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用</p></li><li><p>查询</p></li></ul><pre class="line-numbers language-python"><code class="language-python">PublisherSerializer<span class="token punctuation">(</span>QuerySet<span class="token punctuation">,</span> many<span class="token operator">=</span>Ture<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果QuerySet中包含多个结果，要使用many=Ture</span><span class="token comment" spellcheck="true"># 返回的是rest——framework的对象，要用json.dumps()转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>增加</li></ul><pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> PubulisherSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>p<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PublisherSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Publisher        fields <span class="token operator">=</span> <span class="token punctuation">(</span>            <span class="token string">'id'</span><span class="token punctuation">,</span>            <span class="token string">'name'</span><span class="token punctuation">,</span>            <span class="token string">'address'</span><span class="token punctuation">,</span>            <span class="token string">'operator'</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># fields = "__all__"        </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="界面登录"><a href="#界面登录" class="headerlink" title="界面登录"></a>界面登录</h2><h3 id="在urlpatterns中配置路由"><a href="#在urlpatterns中配置路由" class="headerlink" title="在urlpatterns中配置路由"></a>在urlpatterns中配置路由</h3><pre class="line-numbers language-python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'api-auth/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'rest_framework.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'rest_framework'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><h3 id="基于函数的视图"><a href="#基于函数的视图" class="headerlink" title="基于函数的视图"></a>基于函数的视图</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取信息的列表</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token punctuation">,</span> serializers<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status@api_view<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">publisher_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    列出所有出版社，或者创建一个出版社    """</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取单个信息</span>@api_view<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span> <span class="token string">'DELETE'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">publisher_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        publisher <span class="token operator">=</span> serializers<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>    <span class="token keyword">except</span> serializers<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_404_NOT_FOUND<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>publisher<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'PUT'</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>publisher<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'DELETE'</span><span class="token punctuation">:</span>        publisher<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a>基于类的视图</h2><h3 id="ApiView"><a href="#ApiView" class="headerlink" title="ApiView"></a>ApiView</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token punctuation">,</span> serializers<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> Http404<span class="token keyword">class</span> <span class="token class-name">PublisherList</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    列出所有的出版社,或新建一个出版社    """</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publisher <span class="token operator">=</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>publisher<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取一个查看、修改、删除视图    """</span>    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>        <span class="token keyword">except</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Http404    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publisher <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>publisher<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publisher <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        s <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span class="token punctuation">(</span>publisher<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publisher <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        publisher<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用minxin类"><a href="#使用minxin类" class="headerlink" title="使用minxin类"></a>使用minxin类</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token punctuation">,</span> serializers<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> mixins<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics <span class="token keyword">class</span> <span class="token class-name">PublisherList</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span>                    mixins<span class="token punctuation">.</span>CreateModelMixin<span class="token punctuation">,</span>                    generics<span class="token punctuation">.</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>list<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">*</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>create<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span>                      mixins<span class="token punctuation">.</span>UpdateModelMixin<span class="token punctuation">,</span>                      mixins<span class="token punctuation">.</span>DestroyModelMixin<span class="token punctuation">,</span>                      generics<span class="token punctuation">.</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>retrieve<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>update<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用混和类"><a href="#使用混和类" class="headerlink" title="使用混和类"></a>使用混和类</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token punctuation">,</span> serializers<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics<span class="token keyword">class</span> <span class="token class-name">PublisherList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer    <span class="token comment" spellcheck="true"># permission_classes = (permissions.IsAuthenticated, IsOwnerOrReadOnly)  # 权限控制</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>operator<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer    <span class="token comment" spellcheck="true"># permission_classes = (permissions.IsAuthenticated, IsOwnerOrReadOnly)  # 权限控制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="认证和权限"><a href="#认证和权限" class="headerlink" title="认证和权限"></a>认证和权限</h2><h3 id="全局认证方案"><a href="#全局认证方案" class="headerlink" title="全局认证方案"></a>全局认证方案</h3><pre class="line-numbers language-python"><code class="language-python">REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token string">'rest_framework.authentication.BasicAuthentication'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.authentication.SessionAuthentication'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># django默认方案,</span>        <span class="token string">'rest_framework.authentication.TokenAuthenticcation'</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于APIView类视图认证"><a href="#基于APIView类视图认证" class="headerlink" title="基于APIView类视图认证"></a>基于APIView类视图认证</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAuthenticated<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">)</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'user'</span><span class="token punctuation">:</span> unicode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># `django.contrib.auth.User` 实例。</span>            <span class="token string">'auth'</span><span class="token punctuation">:</span> unicode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># None</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于函数视图认证"><a href="#基于函数视图认证" class="headerlink" title="基于函数视图认证"></a>基于函数视图认证</h3><pre class="line-numbers language-python"><code class="language-python">@api_view<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>@authentication_classes<span class="token punctuation">(</span><span class="token punctuation">(</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">)</span><span class="token punctuation">)</span>@permission_classes<span class="token punctuation">(</span><span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> unicode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># `django.contrib.auth.User` 实例。</span>        <span class="token string">'auth'</span><span class="token punctuation">:</span> unicode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># None</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="token认证"><a href="#token认证" class="headerlink" title="token认证"></a>token认证</h3><pre><code>        pass</code></pre><h3 id="session认证"><a href="#session认证" class="headerlink" title="session认证"></a>session认证</h3><pre><code>        pass</code></pre><h2 id="超链接api"><a href="#超链接api" class="headerlink" title="超链接api"></a>超链接api</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Publisher<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PublisherSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用时必须对url命名</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Restfull </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uWSGI 基础</title>
      <link href="/2019/05/23/django/uwsgi-ji-chu/"/>
      <url>/2019/05/23/django/uwsgi-ji-chu/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="uWSGI-安装"><a href="#uWSGI-安装" class="headerlink" title="uWSGI 安装"></a>uWSGI 安装</h2><pre class="line-numbers language-python"><code class="language-python">  pip install uwsgi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h2 id="uWSGI-配置"><a href="#uWSGI-配置" class="headerlink" title="uWSGI 配置"></a>uWSGI 配置</h2><table><thead><tr><th>配置名</th><th>作用</th></tr></thead><tbody><tr><td>chdir</td><td>WSGI应用目录</td></tr><tr><td>module</td><td>WSGI应用的模块名字</td></tr><tr><td>processes</td><td>uWSGI进程数</td></tr><tr><td>(http-)socket</td><td>套接字路径、地址</td></tr><tr><td>max-requests</td><td>最大并发请求数</td></tr><tr><td>vacuum</td><td>是否清理环境配置</td></tr></tbody></table></li><li><h2 id="uWSGI-使用"><a href="#uWSGI-使用" class="headerlink" title="uWSGI 使用"></a>uWSGI 使用</h2><ul><li><h3 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h3><pre><code>  uwsgi --chdir xxxx --socket :80 --max-reqiests 5000 --processes 4 --module xxx.wsgi</code></pre></li><li><h3 id="配置文件启动"><a href="#配置文件启动" class="headerlink" title="配置文件启动"></a>配置文件启动</h3><ol><li><p>创建ini文件</p><blockquote><p>vim wsgi_demo.ini</p></blockquote></li><li><p>写入配置详情</p><pre><code> [uwsgi] chdir = /xxx/xx http-socket = :80 max-rquests = 5000 processes = 4</code></pre><pre><code> # 实例 chdir = /home/yanqing0709/python/django_deployment/ module = django_deployment.wsgi http-socket = :8000 master = True processes = 4 threads = 1 vacuum = True</code></pre></li><li><p>启动服务</p><blockquote><p>uwsgi –ini wsgi_domo.ini    </p></blockquote></li><li><p>停止服务<br> 前台启动</p><blockquote><p>ctrl+c</p></blockquote><p> 后台启动</p><blockquote><p>uwsgi –stop pid</p></blockquote></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> UWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx安装、配置以及常用命令</title>
      <link href="/2019/05/23/ruan-jian-an-zhuang-yu-pei-zhi/nginx-an-zhuang-pei-zhi-yi-ji-chang-yong-ming-ling/"/>
      <url>/2019/05/23/ruan-jian-an-zhuang-yu-pei-zhi/nginx-an-zhuang-pei-zhi-yi-ji-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><pre><code>  sudo apt-get -install nginx</code></pre></li><li><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><pre><code>  # 添加Nginx源  rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm  # 安装  sudo yum install nginx</code></pre></li></ul></li><li><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code>  # 启动  nginx  # 强制停止  nginx -s stop  # 退出  nginx -s quit  # 重新加载配置文件  nginx -s reload   # 重新打开日志文件  nginx -s reopen</code></pre></li><li><h2 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h2><ul><li><h3 id="nginx-配置文件目录"><a href="#nginx-配置文件目录" class="headerlink" title="nginx 配置文件目录"></a>nginx 配置文件目录</h3><pre><code>  &gt; /etc/nginx</code></pre></li><li><h3 id="nginx-配置文件-1"><a href="#nginx-配置文件-1" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h3><table><thead><tr><th>文件</th><th>用途</th></tr></thead><tbody><tr><td>sites-enabled</td><td>使用中的配置文件</td></tr><tr><td>sites-available</td><td>可使用但未正式使用</td></tr></tbody></table></li></ul></li><li><h2 id="nginx-关键配置模块"><a href="#nginx-关键配置模块" class="headerlink" title="nginx 关键配置模块"></a>nginx 关键配置模块</h2><ul><li><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><table><thead><tr><th>配置名</th><th>作用</th></tr></thead><tbody><tr><td>events</td><td>网络连接相关配置（I/O模型)</td></tr><tr><td>server</td><td>相关服务节点配置</td></tr><tr><td>location</td><td>资源路由配置</td></tr><tr><td>http</td><td>Nginx作为网页服务器时的配置(#mail)</td></tr><tr><td>upstream</td><td>反向代理配置</td></tr></tbody></table></li><li><p>配置层级关系</p><pre><code>  envts{      ...  }  http{      ...      upstream{          ...      }      server{          ...          location{              ...          }      }  }</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 缓存模块</title>
      <link href="/2019/05/21/django/django-huan-cun-mo-kuai/"/>
      <url>/2019/05/21/django/django-huan-cun-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h2><h3 id="Memcached-基于缓存框架缓存，适用超大型网站"><a href="#Memcached-基于缓存框架缓存，适用超大型网站" class="headerlink" title="Memcached 基于缓存框架缓存，适用超大型网站"></a>Memcached 基于缓存框架缓存，适用超大型网站</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Memcached 缓存配置</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 使用python-memcached模块链接memcached</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.memcached.MemcachedCache'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 使用pylibmc块链接memcached</span>        <span class="token comment" spellcheck="true"># 'default': 'django.core.cache.backends.memcached.PyLibMCCache'</span>        <span class="token comment" spellcheck="true"># 配置地址</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">'127.0.0.1:111'</span><span class="token punctuation">,</span>            <span class="token string">'127.0.0.1:222'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库缓存-适用于大中型网站"><a href="#数据库缓存-适用于大中型网站" class="headerlink" title="数据库缓存 适用于大中型网站"></a>数据库缓存 适用于大中型网站</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据库缓存配置</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.db.DatabaseCache'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 缓存引擎</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'my_cache_table'</span>  <span class="token comment" spellcheck="true"># 缓存表名称</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件系统缓存-适用于中小型网站"><a href="#文件系统缓存-适用于中小型网站" class="headerlink" title="文件系统缓存 适用于中小型网站"></a>文件系统缓存 适用于中小型网站</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 文件系统缓存</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.filebased.FileBasedCache'</span><span class="token punctuation">,</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'e"/django'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 缓存文件路径</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地内存缓存-Django默认缓存方式，适用于项目开发测试"><a href="#本地内存缓存-Django默认缓存方式，适用于项目开发测试" class="headerlink" title="本地内存缓存 Django默认缓存方式，适用于项目开发测试"></a>本地内存缓存 Django默认缓存方式，适用于项目开发测试</h3><pre class="line-numbers language-pyhton"><code class="language-pyhton"># 本地内存缓存CACHES = {    'default': {        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',        'LOCATION': 'unique_snowflake'  # 缓存名称标记    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="虚拟缓存-只提供缓存接口，并不能缓存数据，适用于项目测试"><a href="#虚拟缓存-只提供缓存接口，并不能缓存数据，适用于项目测试" class="headerlink" title="虚拟缓存 只提供缓存接口，并不能缓存数据，适用于项目测试"></a>虚拟缓存 只提供缓存接口，并不能缓存数据，适用于项目测试</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 虚拟缓存</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.dummy.DummyCache'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存使用"><a href="#缓存使用" class="headerlink" title="缓存使用"></a>缓存使用</h2><h3 id="全站缓存"><a href="#全站缓存" class="headerlink" title="全站缓存"></a>全站缓存</h3><ol><li><p>在中间件中首尾添加中间件</p><pre class="line-numbers language-python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'django.middleware.cache.UpdateCacheMiddleware'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 配置全站缓存</span> <span class="token string">'django.middleware.security.SecurityMiddleware'</span><span class="token punctuation">,</span> <span class="token string">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="token punctuation">,</span> <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 'django.middleware.csrf.CsrfViewMiddleware',</span> <span class="token string">'django.middleware.locale.LocaleMiddleware'</span><span class="token punctuation">,</span> <span class="token string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class="token punctuation">,</span> <span class="token string">'django.contrib.messages.middleware.MessageMiddleware'</span><span class="token punctuation">,</span> <span class="token string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class="token punctuation">,</span> <span class="token string">'django.middleware.cache.FetchFromCacheMiddleware'</span>  <span class="token comment" spellcheck="true"># 配置全站缓存</span><span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在settings中进行相关设置</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 设置缓存生命周期</span>CACHE_MINDDLEWARE_SECONDS <span class="token operator">=</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Admin 模块</title>
      <link href="/2019/05/21/django/django-admin-mo-kuai/"/>
      <url>/2019/05/21/django/django-admin-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="Admin-使用"><a href="#Admin-使用" class="headerlink" title="Admin 使用"></a>Admin 使用</h2><blockquote><p>django默认开启了admin中间件且配置了路由</p></blockquote><h3 id="创建Admin账号"><a href="#创建Admin账号" class="headerlink" title="创建Admin账号"></a>创建Admin账号</h3><pre><code># 在控制台中执行命令python manage.py createsuperuser# 依此按要求输入信息即可</code></pre><ul><li>注册模型到admin模块<br>在app中的admin.py中注册模型<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一 直接将模型注册到admin</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> apis<span class="token punctuation">.</span>models <span class="token keyword">import</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>admin.site.register(App)</p><h1 id="方法二-自定与模型admin类并继承ModelAdmin"><a href="#方法二-自定与模型admin类并继承ModelAdmin" class="headerlink" title="方法二 自定与模型admin类并继承ModelAdmin"></a>方法二 自定与模型admin类并继承ModelAdmin</h1><h1 id="注册方法一：使用装饰器注册"><a href="#注册方法一：使用装饰器注册" class="headerlink" title="注册方法一：使用装饰器注册"></a>注册方法一：使用装饰器注册</h1><p>@admin.register(App)<br>class AppAdmin(admin.ModelAdmin)<br>    list_display = [‘appid’, ‘name’]  # 设置显示字段</p><h1 id="注册方法二"><a href="#注册方法二" class="headerlink" title="注册方法二"></a>注册方法二</h1><p>admin.site.register(App, AppAdmin)</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django log日志模块</title>
      <link href="/2019/05/20/django/django-log-ri-zhi-mo-kuai/"/>
      <url>/2019/05/20/django/django-log-ri-zhi-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="Django-日志模块"><a href="#Django-日志模块" class="headerlink" title="Django 日志模块"></a>Django 日志模块</h2><h3 id="日志生产过程"><a href="#日志生产过程" class="headerlink" title="日志生产过程"></a>日志生产过程</h3><pre class="mermaid">graph LR产生日志-日志实例-->渲染格式-格式器渲染格式-格式器-->匹配过滤-过滤器匹配过滤-过滤器-->持久化-处理器</pre><h3 id="日志模块的使用"><a href="#日志模块的使用" class="headerlink" title="日志模块的使用"></a>日志模块的使用</h3><ul><li>格式器 formatters</li></ul><ol><li>主要用于配置日志格式</li><li>沿用python语言里面的格式属性</li></ol><table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>%(name)s</td><td>记录器的名称</td></tr><tr><td>%(levelno)s</td><td>数字形式的日志记录级别</td></tr><tr><td>%(levelname)s</td><td>日志记录级别的文本名称</td></tr><tr><td>%(filename)s</td><td>执行日志记录调用的源文件的文件名称</td></tr><tr><td>%(pathname)s</td><td>执行日志记录调用的源文件的路径名称</td></tr><tr><td>%(funcName)s</td><td>执行日志记录调用的函数名称</td></tr><tr><td>%(module)s</td><td>执行日志记录调用的模块名称</td></tr><tr><td>%(lineno)s</td><td>执行日志记录调用的行号</td></tr><tr><td>%(created)s</td><td>执行日志记录的时间</td></tr><tr><td>%(asctime)s</td><td>日期和时间</td></tr><tr><td>%(msecs)s</td><td>毫秒部分</td></tr><tr><td>%(thread)d</td><td>线程ID</td></tr><tr><td>%(threadName)s</td><td>线程名称</td></tr><tr><td>%(process)d</td><td>进程ID</td></tr><tr><td>%(message)s</td><td>记录的消息</td></tr></tbody></table><ul><li>过滤器 filter<ol><li>用于过滤符合条件的日志<br>Django 自带里三个过滤器<ol><li>django.utils.log.RequireDebugTrue - 读取设置中的调试设置</li><li>django.utils.log.RequireDebugFalse - 读取设置中的调试设置</li><li>CallbackFilter(callback) - 这个过滤器接受一个回调函数，并对每个传递给过滤器的记录调用它。如果回调函数返回False，将不会进行记录的处理。</li><li>还可以使用自定义过滤器。</li></ol></li></ol></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 自定义过滤器</span><span class="token keyword">class</span> <span class="token class-name">TestFilter</span><span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Filter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'----'</span> <span class="token keyword">in</span> record<span class="token punctuation">.</span>msg<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>处理器 handler</p><ol><li>用于日志的持久化</li></ol></li><li><p>日志实例 logger</p><ol><li>用于生成日志</li></ol></li><li><p>日志代码例子</p><pre class="line-numbers language-python"><code class="language-python">LOGGING <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">'formatters'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 格式化器</span>      <span class="token string">'standard'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 格式化器名称</span>          <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(asctime)s [%(threadName)s: %(thread)d]'</span>          <span class="token string">'%(pathname)s: %(funcName)s: %(lineno)d %(levelname)s - %(message)s'</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 过滤器</span>      <span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 过滤器名称-自定义的过滤器</span>          <span class="token string">'()'</span><span class="token punctuation">:</span> <span class="token string">'ops.TestFilter'</span>  <span class="token comment" spellcheck="true"># 自定义的过滤器</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 处理器</span>      <span class="token string">'console_handler'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 处理器名称</span>          <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 处理log级别</span>          <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.StreamHandler'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 处理器类-流处理器, 直接在控制台打印信息</span>          <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'standard'</span>  <span class="token comment" spellcheck="true"># 指定使用的格式化器</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">'file_handler'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 处理器名称</span>          <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 处理log级别</span>          <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.handlers.RotatingFileHandler'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 处理器类-文件,此类自动将log文件分割</span>          <span class="token string">'filename'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>LOG_DIR<span class="token punctuation">,</span> <span class="token string">'backend.log'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 文件存放路径及名称</span>          <span class="token string">'maxBytes'</span><span class="token punctuation">:</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 单个log文件大小</span>          <span class="token string">'backupCount'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 文件记录数量</span>          <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'standard'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 指定使用的格式化器</span>          <span class="token string">'encoding'</span><span class="token punctuation">:</span> <span class="token string">'utf-8'</span>  <span class="token comment" spellcheck="true"># 文件编码格式</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'loggers'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 日志实例</span>      <span class="token string">'django'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'console_handler'</span><span class="token punctuation">,</span> <span class="token string">'file_handler'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 选择日志处理器</span>          <span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 日志过滤器</span>          <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span>  <span class="token comment" spellcheck="true"># 处理日志级别</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django ORM 模型优化</title>
      <link href="/2019/05/18/django/django-orm-mo-xing-you-hua/"/>
      <url>/2019/05/18/django/django-orm-mo-xing-you-hua/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="模型变更与迁移"><a href="#模型变更与迁移" class="headerlink" title="模型变更与迁移"></a>模型变更与迁移</h2><ul><li><h3 id="模型迁移的操作"><a href="#模型迁移的操作" class="headerlink" title="模型迁移的操作"></a>模型迁移的操作</h3>  <pre class="mermaid">        graphLR  模型变更 --> makemigrations  makemigrations --> migrate  用户层面-->Django层面  Django层面-->数据库层面</pre></li><li><h3 id="迁移相关的命令"><a href="#迁移相关的命令" class="headerlink" title="迁移相关的命令"></a>迁移相关的命令</h3><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>makemigrations</td><td>将模型变更用Django的形式记录下来</td></tr><tr><td>migrate</td><td>执行模型变更，同步到数据库</td></tr><tr><td>sqlmigrate</td><td>显示每次迁移执行的sql语句</td></tr><tr><td>showmigrations</td><td>显示某个应用的模型变更和迁移历史</td></tr></tbody></table></li><li><h3 id="迁移文件详解"><a href="#迁移文件详解" class="headerlink" title="迁移文件详解"></a>迁移文件详解</h3><table><thead><tr><th>字段</th><th>用途</th></tr></thead><tbody><tr><td>dependencies</td><td>本次迁移的依赖app和依赖迁移记录</td></tr><tr><td>operations</td><td>本次迁移的相关操作</td></tr></tbody></table></li></ul></li><li><h2 id="懒加载与预加载"><a href="#懒加载与预加载" class="headerlink" title="懒加载与预加载"></a>懒加载与预加载</h2><ul><li><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>  &emsp;&emsp;django懒加载是指在存在关系的表中进行数据查询的时候，只查询本体数据，不查询关联对象的数据，调用关联对象数据时，会再次查询数据库。造成二次查询，对数据库造成压力。</p></li><li><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><ul><li><p>方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>select_related</td><td>预加载单个关联对象</td></tr><tr><td>prefetch_related</td><td>预加载多个关联对象</td></tr></tbody></table></li><li><p>例子</p><pre class="line-numbers language-pyhton"><code class="language-pyhton">  user = User.objects.prefetch_related('menu')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>User为模型，menu为User模型中的外键，是一对多关系</p></blockquote><blockquote><p>说明<br>select_related 用于一对一、多对一<br>prefetch_related 用于一对多、多对多</p></blockquote></li></ul></li></ul></li><li><h2 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h2><p>  pass</p></li><li><h2 id="数据库操作规范"><a href="#数据库操作规范" class="headerlink" title="数据库操作规范"></a>数据库操作规范</h2><ul><li><h3 id="合理使用索引"><a href="#合理使用索引" class="headerlink" title="合理使用索引"></a>合理使用索引</h3><ul><li>正确使索引</li><li>在经常查询、排序、比较的字段建立索引</li></ul></li><li><h3 id="使用迭代器itertor迭代较大的QuerySet"><a href="#使用迭代器itertor迭代较大的QuerySet" class="headerlink" title="使用迭代器itertor迭代较大的QuerySet"></a>使用迭代器itertor迭代较大的QuerySet</h3><ul><li>查询数据较大时，使用迭代器节省内存</li></ul></li><li><h3 id="对象属性缓存"><a href="#对象属性缓存" class="headerlink" title="对象属性缓存"></a>对象属性缓存</h3><ul><li>不可调用的属性会被ORM框架缓存</li><li>可调用的属性不会被ORM框架缓存  <br>```pythonuser = User.objects.all()[0]user.name  # 不可调用属性user.menu.all()  # 可调用属性 menu是外键```  > 通过函数方式调用的就是可调用属性，否则就是不可调用属性，不可调用属性不会被缓存，尽量储存在变量中以供下次使用</li></ul></li><li><h3 id="数据库的操作由数据库来做"><a href="#数据库的操作由数据库来做" class="headerlink" title="数据库的操作由数据库来做"></a>数据库的操作由数据库来做</h3><ul><li>过滤： 使用filter、exclude等属性</li><li>聚合： 使用annotate函数进行聚合</li><li>使用原生SQL查询</li></ul></li><li><h3 id="使用检索时，尽量使用有索引的字段"><a href="#使用检索时，尽量使用有索引的字段" class="headerlink" title="使用检索时，尽量使用有索引的字段"></a>使用检索时，尽量使用有索引的字段</h3></li><li><h3 id="不进行不必要的检索"><a href="#不进行不必要的检索" class="headerlink" title="不进行不必要的检索"></a>不进行不必要的检索</h3><ul><li>QuserSet使用values()、 value_list() 函数返回pyhton结构容器</li><li>查询结果长度使用QuerySet.count()而不是len(QuerySet)</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django ORM 数据库函数</title>
      <link href="/2019/05/17/django/django-orm-shu-ju-ku-han-shu/"/>
      <url>/2019/05/17/django/django-orm-shu-ju-ku-han-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="字符串拼接-Concat"><a href="#字符串拼接-Concat" class="headerlink" title="字符串拼接 Concat"></a>字符串拼接 Concat</h2><ul><li><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code>  from django.db.models.function import Concat  def concat_function():      user = User.objects.filter(open_id=&#39;osYBs5ZmG1SobLJ_821dW9CvzcXw&#39;).annotate(          screen_name=Concat(              Value(&#39;open_id&#39;),              &#39;open_id&#39;,              Value(&#39;,&#39;),              Value(&#39;nickname=&#39;),              &#39;nickname&#39;)      )[0]      print(user.screen_name)</code></pre></li><li><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>open_id=osYBs5ZmG1SobLJ_821dW9CvzcXw,nickname=null1</p></blockquote></li></ul></li><li><h2 id="字符串长度-Length"><a href="#字符串长度-Length" class="headerlink" title="字符串长度 Length"></a>字符串长度 Length</h2><ul><li><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre><code>  from django.db.models.function import Length  def length_function():      user = User.objects.filter(open_id=&#39;osYBs5ZmG1SobLJ_821dW9CvzcXw&#39;).annotate(          open_id_length=Length(&#39;open_id&#39;)      )[0]      print(user.open_id_length)</code></pre></li><li><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><blockquote><p>28</p></blockquote></li></ul></li><li><h2 id="转换大小写-Upper-Lower"><a href="#转换大小写-Upper-Lower" class="headerlink" title="转换大小写 Upper, Lower"></a>转换大小写 Upper, Lower</h2><ul><li><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>function <span class="token keyword">import</span> Upper<span class="token punctuation">,</span> Lower  <span class="token keyword">def</span> <span class="token function">case_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>open_id<span class="token operator">=</span><span class="token string">'osYBs5ZmG1SobLJ_821dW9CvzcXw'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>annotate<span class="token punctuation">(</span>          upper_open_id<span class="token operator">=</span>Upper<span class="token punctuation">(</span><span class="token string">'open_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          lower_open_id<span class="token operator">=</span>Lower<span class="token punctuation">(</span><span class="token string">'open_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>upper_open_id<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>lower_open_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><blockquote></blockquote><p>  OSYBS5ZMG1SOBLJ_821DW9CVZCXW<br>  osybs5zmg1soblj_821dw9cvzcxw</p></li></ul></li><li><h2 id="日期处理函数"><a href="#日期处理函数" class="headerlink" title="日期处理函数"></a>日期处理函数</h2><ul><li><p>Now()</p><ul><li><p>代码</p><pre><code>  from django.db.models.functions import Now  def now_function():      apps = App.objects.filter(publish_date__lte=Now())      for app in apps:          print(app)</code></pre></li><li><p>输出</p></li></ul></li><li><p>时间截断函数 Trunc()</p><ul><li><p>代码</p><pre><code>  from django.db.models.functions import Trunc  from django.db.models import Count  def trunc_function():      app_per_month = App.objects.annotate(publish_month=Trunc(&#39;publish_date&#39;, &#39;month&#39;))\          .values(&#39;publish_month&#39;)\          .annotate(publish_num=Count(&#39;appid&#39;))      for app in app_per_day:          print(app)</code></pre></li><li><p>输出</p><blockquote></blockquote><p>  {‘publish_day’: datetime.date(2018, 10, 1), ‘publish_num’: 2}<br>  {‘publish_day’: datetime.date(2018, 11, 1), ‘publish_num’: 2}<br>  {‘publish_day’: datetime.date(2018, 12, 1), ‘publish_num’: 1}</p></li><li><p>解释</p><p>  Trunc()函数将会对数据库中的日期时间类字段按照给定的参数进行截断处理，例如参数为’month’时，所有时间将处理成对应月份的1日那天</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django ORM 关系操作</title>
      <link href="/2019/05/17/django/django-orm-guan-xi-cao-zuo/"/>
      <url>/2019/05/17/django/django-orm-guan-xi-cao-zuo/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h2><ul><li><h3 id="一对一关系建立"><a href="#一对一关系建立" class="headerlink" title="一对一关系建立"></a>一对一关系建立</h3><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>      onetoone <span class="token operator">=</span> models<span class="token punctuation">.</span>OneToOneFiled<span class="token punctuation">(</span>Test<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 一对一关系 Test为关系表的类名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h3 id="一对一关系操作"><a href="#一对一关系操作" class="headerlink" title="一对一关系操作"></a>一对一关系操作</h3><p>  pass</p></li></ul></li></ul><ul><li><h2 id="多对多关系操作"><a href="#多对多关系操作" class="headerlink" title="多对多关系操作"></a>多对多关系操作</h2><ul><li><h3 id="多对多关系建立"><a href="#多对多关系建立" class="headerlink" title="多对多关系建立"></a>多对多关系建立</h3><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>      manytomany <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>B<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 多对多关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul><li><h4 id="查询-返回queryset"><a href="#查询-返回queryset" class="headerlink" title="查询 -返回queryset"></a>查询 -返回queryset</h4><pre class="line-numbers language-python"><code class="language-python">  b <span class="token operator">=</span> A<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>foreignkey<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 正向查询</span>  a <span class="token operator">=</span> B<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>查询表_set<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 反向查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h4 id="3-2-2-增加数据"><a href="#3-2-2-增加数据" class="headerlink" title="3.2.2 增加数据"></a>3.2.2 增加数据</h4><pre><code>  a.foreignkey.add(1)  # 添加单个, 1是B表id  a.foreignkey.add(1, 2, 3)   # 添加多个， 1，2，3是B 表id  a.foreignkey.add(*[1,2,3])   # 添加多个， 1，2，3是B 表id</code></pre></li><li><h4 id="3-2-3-更新数据"><a href="#3-2-3-更新数据" class="headerlink" title="3.2.3 更新数据"></a>3.2.3 更新数据</h4><pre><code>  a.foreignkey.set([1, 2, 3])    #1， 2， 3 可以是子表id或者是子表的一个实例对象，更新数据时，不需要添加*号</code></pre></li><li><h4 id="3-2-4-删除数据"><a href="#3-2-4-删除数据" class="headerlink" title="3.2.4 删除数据"></a>3.2.4 删除数据</h4><pre class="line-numbers language-python"><code class="language-python">  a<span class="token punctuation">.</span>foreignkey<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 删除1条</span>  a<span class="token punctuation">.</span>foreignkey<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 删除多条</span>  a<span class="token punctuation">.</span>foreiginkey<span class="token punctuation">.</span>cleaer<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 删除与当前相关所有数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
